@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:map";

.popover_container {
  position: relative;
  display: inline-block;
  width: fit-content;
}

.popover_trigger {
  cursor: pointer;
  outline: none;
  border: none;
  background-color: transparent;
  padding: none;

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: 4px;
  }
}

.popover {
  position: absolute;
  z-index: 1000;
  max-width: 90vw;
  min-width: 100%;
  width: max-content;
  background-color: var(--background-light-color);
  color: var(--text-color-secondary);
  border: 1px solid var(--text-color-secondary);
  animation: fade-in 0.25s ease-in-out forwards;

  @include bp.down(sm) {
    max-width: 96vw;
    min-width: 75%;
  }

  @include bp.up(lg) {
    max-width: 520px;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: 6px;
  }

  @each $key, $value in theme.$rounding {
    &_round-#{$key} {
      border-radius: $value;
    }
  }

  @each $key, $value in theme.$shadow {
    &_shadow-#{$key} {
      box-shadow: $value;
    }
  }

  @each $name, $values in theme.$themes {
    &_#{$name} {
      background-color: map.get($values, bg);
      color: map.get($values, text);
      border: if(
        map.has-key($values, border),
        map.get($values, border),
        1px solid var(--text-color-secondary)
      );
    }
  }

  @each $name, $values in theme.$states {
    &_#{$name} {
      background-color: map.get($values, bg);
      color: map.get($values, text);
      box-shadow: if(
        map.has-key($values, shadow),
        map.get($values, shadow),
        theme.$box-shadow-medium
      );
      border: if(
        map.has-key($values, border),
        map.get($values, border),
        1px solid var(--text-color-secondary)
      );
    }
  }

  &_clear {
    border: 1px solid var(--text-color-primary);
  }

  &::after {
    content: none !important;
    display: none !important;
  }

  @include bp.up(sm) {
    &[data-overflow-right="true"] {
      left: auto !important;
      right: 0 !important;
      transform: translateY(10px);
    }

    &[data-overflow-left="true"] {
      right: auto !important;
      left: 0 !important;
      transform: translateY(10px);
    }
  }
}

.popover_top {
  bottom: 95%;
  left: 50%;
  transform: translateX(-50%) translateY(-10px);
}

.popover_bottom {
  top: 100%;
  left: 50%;
  transform: translateX(-50%) translateY(10px);
}

.popover_left {
  right: 100%;
  top: 50%;
  transform: translateX(-8px) translateY(-50%);
}

.popover_right {
  left: 100%;
  top: 50%;
  transform: translateX(8px) translateY(-50%);
}

@include bp.down(xs) {
  .popover_top,
  .popover_bottom {
    left: 50%;
    transform: translateX(-50%) translateY(8px);
  }

  .popover_left,
  .popover_right {
    top: 50%;
    transform: translateX(0) translateY(-50%);
  }
}

@media (prefers-reduced-motion: reduce) {
  .popover,
  .popover * {
    transition: none !important;
    animation: none !important;
  }
}

@media (hover: none) {
  .popover {
    animation: none;
  }
}

@media (forced-colors: active) {
  .popover {
    background: Canvas;
    color: CanvasText;
    border: 1px solid ButtonText;
    outline-color: Highlight;
  }
}
