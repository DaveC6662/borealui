@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:color";
@use "sass:map";

.icon_button {
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 0.8rem;
  border: none;
  transition: theme.$transition-default;
  text-decoration: none;
  color: inherit;
  transform-origin: center;

  &:hover {
    text-decoration: none;
    transform: scale(1.05);
    cursor: pointer;

    @include bp.down(sm) {
      transform: scale(1.03);
    }
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }

  @each $key, $value in theme.$rounding {
    &_round-#{$key} {
      border-radius: $value;
    }
  }

  @each $key, $value in theme.$shadow {
    &_shadow-#{$key} {
      box-shadow: $value;
    }
  }

  .svg {
    height: 20px;
    width: 20px;

    @include bp.down(sm) {
      height: 18px;
      width: 18px;
    }
    @include bp.up(lg) {
      height: 22px;
      width: 22px;
    }
  }

  @each $name, $values in theme.$themes {
    &_#{$name} {
      background-color: map.get($values, bg);
      color: map.get($values, text);

      &:hover {
        background-color: map.get($values, hover);
      }

      &:focus-visible {
        outline: 2px solid map.get($values, border);
        outline-offset: 2px;
      }

      &.icon_button_outline {
        background-color: transparent;
        color: map.get($values, border);
        border: 2px solid map.get($values, border);

        @include bp.down(sm) {
          border-width: 1.5px;
        }
      }

      &.icon_button_outline:hover {
        border-color: map.get($values, hover);
        color: map.get($values, text);
      }
    }
  }

  @each $name, $values in theme.$states {
    &_#{$name} {
      background-color: map.get($values, bg);
      color: map.get($values, text);

      &:hover {
        background-color: map.get($values, hover);
      }

      &:focus-visible {
        outline: 2px solid map.get($values, border);
        outline-offset: 2px;
      }

      &.icon_button_outline {
        background-color: transparent;
        color: map.get($values, border);
        border: 2px solid map.get($values, border);

        @include bp.down(sm) {
          border-width: 1.5px;
        }
      }

      &.icon_button_outline:hover {
        border-color: map.get($values, hover);
        color: map.get($values, text);
      }
    }
  }

  $sizes: (
    "xs": (
      size: 25px,
      label: theme.$font-size-xs,
      icon: 0.7rem,
    ),
    "small": (
      size: 30px,
      label: theme.$font-size-sm,
      icon: 1rem,
    ),
    "medium": (
      size: 40px,
      label: theme.$font-size-md,
      icon: 1.2rem,
    ),
    "large": (
      size: 50px,
      label: theme.$font-size-lg,
      icon: 1.3rem,
    ),
    "xl": (
      size: 60px,
      label: theme.$font-size-lg,
      icon: 1.5rem,
    ),
  );

  @each $size, $vals in $sizes {
    &_#{$size} {
      $dim: map.get($vals, size);
      $ico: map.get($vals, icon);

      width: $dim;
      height: $dim;

      svg {
        width: $ico;
        height: $ico;
      }

      @include bp.down(sm) {
        width: calc(#{$dim} * 0.9);
        height: calc(#{$dim} * 0.9);

        svg {
          width: calc(#{$ico} * 0.9);
          height: calc(#{$ico} * 0.9);
        }
      }

      @include bp.up(lg) {
        width: calc(#{$dim} * 1.1);
        height: calc(#{$dim} * 1.1);

        svg {
          width: calc(#{$ico} * 1.05);
          height: calc(#{$ico} * 1.05);
        }
      }
    }
  }

  &_disabled {
    background-color: theme.$disabled-color;
    color: var(--text-color-primary);
    cursor: not-allowed;
    pointer-events: none;
    box-shadow: none;
  }

  &_loader {
    width: 1.2rem;
    height: 1.2rem;
    border: 2px solid transparent;
    border-top-color: var(--text-color-primary);
    border-radius: 50%;
    animation: spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;
  }
}

@media (prefers-reduced-motion: reduce) {
  .icon_button,
  .icon_button * {
    transition: none !important;
  }
  .icon_button:hover {
    transform: none !important;
  }
  .icon_button_loader {
    animation: none !important;
  }
}

@media (hover: none) {
  .icon_button:hover {
    transform: none;
  }
}

@media (forced-colors: active) {
  .icon_button {
    background: Canvas;
    color: CanvasText;
    border-color: ButtonText;
    outline-color: Highlight;
  }

  .icon_button.icon_button_outline {
    border: 1px solid ButtonText;
  }
}
