@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:map";

.iconButton {
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 0.8rem;
  border: none;
  text-decoration: none;
  color: inherit;
  transition: theme.$transition-default;
  transform-origin: center;
  background: transparent;

  &:hover {
    text-decoration: none;
    transform: scale(1.05);
    cursor: pointer;

    @include bp.down(sm) {
      transform: scale(1.03);
    }
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }

  svg {
    width: 20px;
    height: 20px;

    @include bp.down(sm) {
      width: 18px;
      height: 18px;
    }

    @include bp.up(lg) {
      width: 22px;
      height: 22px;
    }
  }
}

@each $k, $v in theme.$rounding {
  .round#{$k} {
    border-radius: $v;
  }
}
@each $k, $v in theme.$shadow {
  .shadow#{$k} {
    box-shadow: $v;
  }
}

@each $name, $vals in theme.$themes {
  .#{$name} {
    background-color: map.get($vals, bg);
    color: map.get($vals, text);

    &:hover {
      background-color: map.get($vals, hover);
    }

    &:focus-visible {
      outline: 2px solid map.get($vals, border);
      outline-offset: 2px;
    }

    &.outline {
      background-color: transparent;
      color: map.get($vals, border);
      border: 2px solid map.get($vals, border);

      @include bp.down(sm) {
        border-width: 1.5px;
      }

      &:hover {
        border-color: map.get($vals, hover);
        color: map.get($vals, text);
      }
    }
  }
}

@each $name, $vals in theme.$states {
  .#{$name} {
    background-color: map.get($vals, bg);
    color: map.get($vals, text);

    &:hover {
      background-color: map.get($vals, hover);
    }

    &:focus-visible {
      outline: 2px solid map.get($vals, border);
      outline-offset: 2px;
    }

    &.outline {
      background-color: transparent;
      color: map.get($vals, border);
      border: 2px solid map.get($vals, border);

      @include bp.down(sm) {
        border-width: 1.5px;
      }

      &:hover {
        border-color: map.get($vals, hover);
        color: map.get($vals, text);
      }
    }
  }
}

$sizes: (
  "xs": (
    size: 25px,
    icon: 0.7rem,
  ),
  "small": (
    size: 30px,
    icon: 1rem,
  ),
  "medium": (
    size: 40px,
    icon: 1.2rem,
  ),
  "large": (
    size: 50px,
    icon: 1.3rem,
  ),
  "xl": (
    size: 60px,
    icon: 1.5rem,
  ),
);

@each $sz, $vals in $sizes {
  .#{$sz} {
    $dim: map.get($vals, size);
    $ico: map.get($vals, icon);

    width: $dim;
    height: $dim;

    svg {
      width: $ico;
      height: $ico;
    }

    @include bp.down(sm) {
      width: calc(#{$dim} * 0.9);
      height: calc(#{$dim} * 0.9);

      svg {
        width: calc(#{$ico} * 0.9);
        height: calc(#{$ico} * 0.9);
      }
    }

    @include bp.up(lg) {
      width: calc(#{$dim} * 1.1);
      height: calc(#{$dim} * 1.1);

      svg {
        width: calc(#{$ico} * 1.05);
        height: calc(#{$ico} * 1.05);
      }
    }
  }
}

.disabled {
  background-color: theme.$disabled-color;
  color: var(--text-color-primary);
  cursor: not-allowed;
  pointer-events: none;
  box-shadow: none;
}

.loader {
  width: 1.2rem;
  height: 1.2rem;
  border: 2px solid transparent;
  border-top-color: var(--text-color-primary);
  border-radius: 50%;
  animation: spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

@media (prefers-reduced-motion: reduce) {
  .iconButton,
  .iconButton * {
    transition: none !important;
  }

  .iconButton:hover {
    transform: none !important;
  }
  .loader {
    animation: none !important;
  }
}

@media (hover: none) {
  .iconButton:hover {
    transform: none;
  }
}

@media (forced-colors: active) {
  .iconButton {
    background: Canvas;
    color: CanvasText;
    border-color: ButtonText;
    outline-color: Highlight;
  }

  .outline {
    border: 1px solid ButtonText;
  }
}
