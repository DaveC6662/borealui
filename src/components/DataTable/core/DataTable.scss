@use "../../../styles/theme" as theme;
@use "../../../styles/globals";
@use "sass:map";

.data_table_wrapper {
  width: 100%;
  overflow-x: auto;
  margin: theme.$spacing-md;

  .data_table {
    width: 100%;
    border-collapse: collapse;
    font-size: theme.$font-size-base;
    min-width: 600px;

    th {
      text-align: left;
      padding: theme.$spacing-sm;
      font-weight: theme.$font-weight-bold;
      white-space: nowrap;
    }

    td {
      padding: theme.$spacing-sm;
      border-bottom: 1px solid var(--text-color-primary);
      text-align: left;
      white-space: nowrap;
    }

    th:hover {
      cursor: pointer;
    }

    tbody tr:last-child td {
      border-bottom: none;
    }
  }

  .data_table .data_table_header_sortable {
    cursor: pointer;
  }

  .data_table_sort_icon {
    margin-left: theme.$spacing-xxs;
    font-size: 0.9em;
  }

  .data_table_row_clickable {
    cursor: pointer;
    transition: background-color theme.$transition-default;

    &:hover {
      background-color: var(--background-color-light);
    }

    &:hover:nth-child(even) {
      background-color: var(--background-color);
    }
  }

  .data_table_row_striped:nth-child(even) {
    background-color: var(--background-color-darker);
  }

  tbody tr {
    background-color: var(--background-color-dark);
  }

  @each $name, $values in theme.$themes {
    .data_table_#{$name} {
      th {
        background-color: map.get($values, bg);
        color: map.get($values, text);
      }
    }

    .data_table_#{$name}.data_table_outline {
      th {
        border: 2px solid map.get($values, border);
        background-color: transparent;
        color: map.get($values, text-color);
      }
    }
  }

  @each $name, $values in theme.$states {
    .data_table_#{$name} {
      th {
        background-color: map.get($values, bg);
        color: map.get($values, text);
      }
    }

    .data_table_#{$name}.data_table_outline {
      th {
        border: 2px solid map.get($values, border);
        background-color: transparent;
        color: map.get($values, text-color);
      }
    }
  }

  &.clear {
    box-shadow: none;

    th {
      background-color: transparent;
    }
  }

  @media (width <= 768px) {
    .data_table {
      font-size: theme.$font-size-sm;

      th,
      td {
        padding: theme.$spacing-xs;
      }
    }
  }

  @media (width <= 480px) {
    .data_table {
      font-size: theme.$font-size-xs;

      th,
      td {
        display: block;
        width: 100%;
        box-sizing: border-box;
        text-align: left;
        padding: theme.$spacing-xs;
        border-bottom: 1px solid var(--text-color-primary);
      }

      tbody tr {
        display: block;
        margin-bottom: theme.$spacing-sm;
      }

      thead {
        display: none;
      }

      td::before {
        content: attr(data-label);
        display: block;
        font-weight: theme.$font-weight-bold;
        margin-bottom: 2px;
        color: var(--text-color-secondary);
      }
    }
  }
}

@each $key, $value in theme.$rounding {
  .data_table_round-#{$key} {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .data_table_shadow-#{$key} {
    box-shadow: $value;
  }
}
