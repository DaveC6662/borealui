@use "../../../styles/theme" as theme;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";
@use "sass:list";

$sizes: (
  "xs": (
    header-padding: (
      theme.$spacing-xs,
      theme.$spacing-sm,
    ),
    header-font-size: theme.$font-size-xs,
    icon-size: 1rem,
  ),
  "small": (
    header-padding: (
      theme.$spacing-xs,
      theme.$spacing-md,
    ),
    header-font-size: theme.$font-size-sm,
    icon-size: 1.2rem,
  ),
  "medium": (
    header-padding: (
      theme.$spacing-sm,
      theme.$spacing-lg,
    ),
    header-font-size: theme.$font-size-md,
    icon-size: 1.5rem,
  ),
  "large": (
    header-padding: (
      theme.$spacing-sm,
      theme.$spacing-xl,
    ),
    header-font-size: theme.$font-size-md,
    icon-size: 1.8rem,
  ),
  "xl": (
    header-padding: (
      theme.$spacing-sm,
      theme.$spacing-xl,
    ),
    header-font-size: theme.$font-size-lg,
    icon-size: 2rem,
  ),
);

.accordion {
  border-radius: theme.$border-radius-md;
  margin-bottom: theme.$spacing-sm;
  background-color: transparent !important;
  transition: box-shadow theme.$transition-default;
}

@each $key, $value in theme.$rounding {
  .round#{$key} {
    border-radius: $value;

    .header {
      border-radius: $value;
    }

    .content {
      border-bottom-left-radius: $value;
      border-bottom-right-radius: $value;
    }

    .expanded .content {
      border-bottom-left-radius: $value;
      border-bottom-right-radius: $value;
    }
  }
}

@each $key, $value in theme.$shadow {
  .shadow#{$key} {
    .header {
      box-shadow: $value;
    }
  }
}

.expanded .header {
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-width: 250px;
  width: 100%;
  color: var(--text-color-primary);
  padding: theme.$spacing-sm;
  font-size: theme.$font-size-base;
  font-weight: theme.$font-weight-bold;
  cursor: pointer;
  background-color: transparent;
  border: none;
  border-radius: theme.$border-radius-md;
  outline: none;
  transition:
    background-color theme.$transition-default,
    border-radius theme.$transition-default;

  &:focus-visible {
    outline: 2px solid var(--text-color-primary);
    outline-offset: 2px;
  }
}

@each $name, $values in theme.$themes {
  .#{$name} {
    background-color: map.get($values, bg);
    color: var(--text-color-primary);

    &:hover {
      background-color: map.get($values, hover);
    }

    &.outline {
      background-color: transparent;
      border: 2px solid map.get($values, border);
      color: map.get($values, text-color);

      &:hover {
        background-color: map.get($values, hover);
        color: map.get($values, text-hover);
      }
    }
  }
}

@each $name, $values in theme.$states {
  .#{$name} {
    background-color: map.get($values, bg);
    color: var(--text-color-primary);

    &:hover {
      background-color: map.get($values, hover);
    }

    &.outline {
      background-color: transparent;
      border: 2px solid map.get($values, border);
      color: map.get($values, text-color);

      &:hover {
        background-color: map.get($values, hover);
        color: map.get($values, text-hover);
      }
    }
  }
}

.disabled {
  background-color: theme.$disabled-color;
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.6;
}

.content {
  box-sizing: border-box;
  padding: 0 theme.$spacing-md;
  max-height: 0;
  opacity: 0;
  overflow: hidden;
  background-color: var(--background-color-lighter);
  color: var(--text-color-primary);
  transition:
    max-height 0.3s ease,
    padding theme.$transition-default,
    border-radius theme.$transition-default,
    opacity theme.$transition-default;
}

.expanded .content {
  max-height: none;
  opacity: 1;
  padding: theme.$spacing-xl theme.$spacing-xl;
  border-bottom-left-radius: theme.$border-radius-md;
  border-bottom-right-radius: theme.$border-radius-md;
}

.content_clear {
  background-color: transparent;
  border: 1px solid var(--text-color-primary);
}

.title {
  flex-grow: 1;
}

.icon {
  font-size: 1.5rem;
  margin-right: 10px;
  transition: transform theme.$transition-default;
}

.expanded .icon {
  transform: rotate(180deg);
}

@each $size, $config in $sizes {
  .#{$size} {
    .header {
      padding: list.nth(map.get($config, header-padding), 1)
        list.nth(map.get($config, header-padding), 2);
      font-size: map.get($config, header-font-size);
    }

    .icon {
      font-size: map.get($config, icon-size);
    }
  }
}
