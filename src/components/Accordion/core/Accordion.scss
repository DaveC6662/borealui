@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:map";
@use "sass:list";

$sizes: (
  "xs": (
    header-padding: (
      theme.$spacing-xs,
      theme.$spacing-sm,
    ),
    header-font-size: theme.$font-size-xs,
    icon-size: 1rem,
  ),
  "small": (
    header-padding: (
      theme.$spacing-xs,
      theme.$spacing-md,
    ),
    header-font-size: theme.$font-size-sm,
    icon-size: 1.2rem,
  ),
  "medium": (
    header-padding: (
      theme.$spacing-sm,
      theme.$spacing-lg,
    ),
    header-font-size: theme.$font-size-md,
    icon-size: 1.5rem,
  ),
  "large": (
    header-padding: (
      theme.$spacing-sm,
      theme.$spacing-xl,
    ),
    header-font-size: theme.$font-size-md,
    icon-size: 1.8rem,
  ),
  "xl": (
    header-padding: (
      theme.$spacing-sm,
      theme.$spacing-xl,
    ),
    header-font-size: theme.$font-size-lg,
    icon-size: 2rem,
  ),
);

@media (prefers-reduced-motion: reduce) {
  .accordion_header {
    transition: none;
  }

  .accordion_content {
    transition: none;
  }
}

@media (hover: none) {
  .accordion_header:hover {
    background: none;
  }
}

@media (forced-colors: active) {
  .accordion_header {
    border: 1px solid ButtonText;
    outline-color: Highlight;
  }
}

.accordion {
  border-radius: theme.$border-radius-md;
  margin-bottom: theme.$spacing-sm;
  background-color: transparent !important;
  transition: box-shadow theme.$transition-default;
}

@each $key, $value in theme.$rounding {
  .accordion_round-#{$key} {
    border-radius: $value;
  }
  .accordion_round-#{$key} .accordion_header {
    border-radius: $value;
  }
  .accordion_round-#{$key} .accordion_content,
  .accordion_round-#{$key}.accordion_expanded .accordion_content {
    border-bottom-left-radius: $value;
    border-bottom-right-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .accordion_shadow-#{$key} .accordion_header {
    box-shadow: $value;
  }
}

.accordion_expanded .accordion_header {
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

.accordion_header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-width: 250px;
  width: 100%;
  min-height: 44px;
  color: var(--text-color-primary);
  padding: theme.$spacing-sm;
  font-size: clamp(theme.$font-size-sm, 0.9rem + 0.2vw, theme.$font-size-base);
  font-weight: theme.$font-weight-bold;
  cursor: pointer;
  background-color: transparent;
  border: none;
  border-radius: theme.$border-radius-md;
  outline: none;
  transition:
    background-color theme.$transition-default,
    border-radius theme.$transition-default;

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }

  @include bp.down(sm) {
    padding: theme.$spacing-xs theme.$spacing-sm;
  }

  @include bp.between(sm, md) {
    padding: theme.$spacing-sm theme.$spacing-md;
  }

  @include bp.up(lg) {
    padding: theme.$spacing-sm theme.$spacing-lg;
  }
}

@each $name, $values in theme.$themes {
  .accordion_#{$name} {
    background-color: map.get($values, bg);
    color: var(--text-color-primary);
  }
  .accordion_#{$name}:hover {
    background-color: map.get($values, hover);
  }

  .accordion_outline.accordion_#{$name} {
    background-color: transparent;
    border: 2px solid map.get($values, border);
    color: map.get($values, text-color);

    @include bp.down(sm) {
      border-width: 1.5px;
    }

    &:hover {
      background-color: map.get($values, hover);
      color: map.get($values, text-hover);
    }
  }
}

@each $name, $values in theme.$states {
  .accordion_#{$name} {
    background-color: map.get($values, bg);
    color: var(--text-color-primary);
  }
  .accordion_#{$name}:hover {
    background-color: map.get($values, hover);
  }

  .accordion_outline.accordion_#{$name} {
    background-color: transparent;
    border: 2px solid map.get($values, border);
    color: map.get($values, text-color);

    @include bp.down(sm) {
      border-width: 1.5px;
    }

    &:hover {
      background-color: map.get($values, hover);
      color: map.get($values, text-hover);
    }
  }
}

.accordion_disabled {
  background-color: theme.$disabled-color;
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.6;
}

.accordion_content {
  display: grid;
  grid-template-rows: 0fr;
  transition:
    grid-template-rows 300ms ease,
    padding theme.$transition-default,
    border-radius theme.$transition-default,
    opacity theme.$transition-default,
    transform theme.$transition-default;
  overflow: hidden;
  box-sizing: border-box;
  padding: 0 theme.$spacing-md;
  background-color: var(--background-color-lighter);
  color: var(--text-color-primary);
  opacity: 0;

  @include bp.down(sm) {
    padding: 0 theme.$spacing-sm;
  }

  @include bp.up(lg) {
    padding: 0 theme.$spacing-lg;
  }
}

.accordion_content_inner {
  min-height: 0;
  overflow: hidden;
}

.accordion_expanded .accordion_content {
  grid-template-rows: 1fr;
  opacity: 1;
  padding: theme.$spacing-xl theme.$spacing-xl;
  border-bottom-left-radius: theme.$border-radius-md;
  border-bottom-right-radius: theme.$border-radius-md;

  @include bp.down(sm) {
    padding: theme.$spacing-md theme.$spacing-md;
  }

  @include bp.up(lg) {
    padding: theme.$spacing-xl calc(theme.$spacing-xl * 1.1);
  }
}

.accordion_content.loaded {
  opacity: 1;
  transform: translateY(0);
}

.accordion_content.loading {
  opacity: 0.5;
}

.accordion_content_clear {
  background-color: transparent;
  border: 1px solid var(--text-color-primary);

  @include bp.down(sm) {
    border-width: 1px;
  }
}

.accordion_title {
  flex-grow: 1;
  font-size: clamp(theme.$font-size-sm, 0.9rem + 0.2vw, theme.$font-size-base);
}

.accordion_icon {
  font-size: 1.5rem;
  margin-right: 10px;
  transition: transform theme.$transition-default;

  @include bp.down(sm) {
    margin-right: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    margin-right: theme.$spacing-sm;
  }
}

.accordion_expanded .accordion_icon {
  transform: rotate(180deg);
}

@each $size, $config in $sizes {
  .accordion_#{$size} .accordion_header {
    padding: list.nth(map.get($config, header-padding), 1)
      list.nth(map.get($config, header-padding), 2);

    $fs: map.get($config, header-font-size);

    font-size: clamp(max(theme.$font-size-sm, $fs - 2px), 0.9rem + 0.25vw, $fs);

    @include bp.up(lg) {
      font-size: calc(#{$fs} * 1.05);
    }
  }

  .accordion_#{$size} .accordion_icon {
    $is: map.get($config, icon-size);

    font-size: $is;

    @include bp.up(lg) {
      font-size: calc(#{$is} * 1.05);
    }
  }
}
