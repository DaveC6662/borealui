@use "../../../styles/theme" as theme;
@use "sass:color";
@use "sass:map";

.wrapper {
  display: flex;
  flex-direction: column;
  gap: theme.$spacing-xs;
  width: 100%;
}

.input[type="datetime-local"]::-webkit-calendar-picker-indicator {
  display: none;
  appearance: none;
}

.input[type="datetime-local"] {
  border: 0;
}

.label {
  font-size: theme.$font-size-sm;
  font-weight: theme.$font-weight-bold;
  margin-bottom: theme.$spacing-xs;
}

.inputWrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
}

.input {
  width: 100%;
  padding: theme.$spacing-sm;
  border-radius: theme.$border-radius-lg;
  border: 2px solid transparent;
  font-size: theme.$font-size-base;
  background-color: transparent;
  transition: border-color 0.2s ease-in-out;

  &:focus {
    outline: none;
    border-color: var(--text-color-primary);
  }

  &::-webkit-calendar-picker-indicator {
    opacity: 1;
    z-index: 2;
    filter: invert(1);
    cursor: pointer;
  }
}

.icon {
  font-size: theme.$font-size-base;
  cursor: pointer;
  z-index: 2;
  pointer-events: auto;
  transition: color 0.2s ease-in-out;
  color: theme.$text-color-primary;
  line-height: 1em;
}

@each $theme, $values in theme.$themes {
  .#{$theme} .input {
    background-color: map.get($values, bg);
    color: map.get($values, text);

    &:focus {
      border-color: map.get($values, focus);
    }
  }

  .#{$theme}.outline .input {
    border: 2px solid map.get($values, bg);

    &:focus {
      border-color: map.get($values, focus);
    }

    &:hover {
      border-color: map.get($values, color);
    }
  }
}

@each $state, $values in theme.$states {
  .#{$state} .input {
    background-color: map.get($values, bg);
    color: map.get($values, text);

    &:focus {
      border-color: map.get($values, focus);
    }
  }

  .#{$state}.outline .input {
    border: 2px solid map.get($values, bg);

    &:focus {
      border-color: map.get($values, focus);
    }

    &:hover {
      border-color: map.get($values, color);
    }
  }
}

.outline .input {
  background-color: transparent;
  box-shadow: none;
}

.clear.outline .input {
  color: var(--text-color-primary);
  border: 2px solid var(--text-color-primary);
}

.disabled .input {
  opacity: 0.6;
  pointer-events: none;
  background-color: theme.$disabled-color;
  color: theme.$disabled-color;
  cursor: not-allowed;
}

$input-sizes: (
  "xs": (
    padding: 4px 3px,
    font-size: theme.$font-size-xs,
    max-width: 160px,
    icon-margin: -22px,
    icon-size: 15px,
  ),
  "small": (
    padding: 6px 10px,
    font-size: theme.$font-size-sm,
    max-width: 190px,
    icon-margin: -30px,
    icon-size: 20px,
  ),
  "medium": (
    padding: 6px 10px,
    font-size: theme.$font-size-md,
    max-width: 215px,
    icon-margin: -32px,
    icon-size: 22px,
  ),
  "large": (
    padding: 8px 16px,
    font-size: theme.$font-size-base,
    max-width: 250px,
    icon-margin: -42px,
    icon-size: 25px,
  ),
  "xl": (
    padding: 10px 20px,
    font-size: theme.$font-size-lg,
    max-width: 320px,
    icon-margin: -50px,
    icon-size: 30px,
  ),
);

@each $size, $props in $input-sizes {
  .#{$size} .input {
    padding: map.get($props, padding);
    font-size: map.get($props, font-size);
    max-width: map.get($props, max-width);
  }

  .#{$size} .icon {
    margin-left: map.get($props, icon-margin);

    svg {
      height: map.get($props, icon-size);
      width: map.get($props, icon-size);
    }
  }
}

.description {
  font-size: theme.$font-size-sm;
  color: var(--text-color-secondary);
}
