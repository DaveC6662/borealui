@use "../../../styles/theme" as theme;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";

$input-themes: (
  "primary": (bg: var(--primary-color), color: var(--text-color-primary), focus: var(--primary-color)),
  "secondary": (bg: var(--secondary-color), color: var(--text-color-secondary), focus: var(--secondary-color)),
  "success": (bg: theme.$success-color, color: var(--text-color-primary), focus: theme.$success-color),
  "error": (bg: theme.$error-color, color: var(--text-color-primary), focus: theme.$error-color),
  "warning": (bg: theme.$warning-color, color: var(--text-color-primary), focus: theme.$warning-color),
  "clear": (bg: transparent, color: var(--text-color-primary), focus: var(--background-color-light))
);

.wrapper {
  display: flex;
  flex-direction: column;
  gap: theme.$spacing-xs;
  width: 100%;


.label {
  font-size: theme.$font-size-sm;
  font-weight: theme.$font-weight-bold;
  margin-bottom: theme.$spacing-xs;
}

.inputWrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
  max-width: 250px;
  width: 100%;
}

.input {
  width: 100%;
  padding: theme.$spacing-sm;
  border-radius: theme.$border-radius-lg;
  border: 2px solid transparent;
  font-size: theme.$font-size-base;
  background-color: transparent;
  transition: border-color 0.2s ease-in-out;

  &:focus {
    outline: none;
    border-color: var(--text-color-primary);
  }

  &::-webkit-calendar-picker-indicator {
    opacity: 1;
    z-index: 2;
    cursor: pointer;
  }

  @each $theme, $values in $input-themes {
    &.#{$theme} {
      background-color: map.get($values, bg);
      color: map.get($values, color);
  
      &:focus {
        border-color: map.get($values, focus);
      }
    }
  }
}



.input {
  &:disabled {
    background-color: theme.$disabled-color;
    color: theme.$disabled-color;
    cursor: not-allowed;
  }
}

.outline .input {
  background-color: transparent;
  box-shadow: none;
}

@each $theme, $values in $input-themes {
  &.#{$theme}.outline .input {
    color: map.get($values, bg);
    border: 2px solid map.get($values, bg);

    &:focus {
      border-color: map.get($values, focus); 
    }

    &:hover {
      border-color: map.get($values, color);
    }
  }
}

&.clear.outline .input {
  color: var(--text-color-primary);
  border: 2px solid var(--text-color-primary);
}


$input-sizes: (
  "xs": (padding: 4px 3px, font-size: theme.$font-size-xs),
  "small": (padding: 6px 10px, font-size: theme.$font-size-sm),
  "medium": (padding: 6px 10px, font-size: theme.$font-size-md),
  "large": (padding: 8px 16px, font-size: theme.$font-size-base),
  "xl": (padding: 10px 20px, font-size: theme.$font-size-lg)
);

@each $size, $props in $input-sizes {
  &.#{$size} .input {
    padding: map.get($props, padding);
    font-size: map.get($props, font-size);
  }
}

}
