@use "../../../styles/theme" as theme;
@use "sass:color";
@use "sass:map";

.breadcrumbs {
  display: flex;
  align-items: center;
  font-size: theme.$font-size-base;
  font-weight: theme.$font-weight-light;
  gap: theme.$spacing-xs;
  width: fit-content;
  padding: theme.$spacing-xs theme.$spacing-sm;
  list-style: none;
  overflow-x: auto;
  border-radius: theme.$border-radius-sm;
}

@each $name, $values in theme.$themes {
  .#{$name} {
    color: map.get($values, text);
    background-color: map.get($values, bg);

    &:hover {
      background-color: map.get($values, hover);
      transform: translateY(-2px);
      box-shadow: theme.$box-shadow-large;
    }

    &:focus {
      outline: 2px solid map.get($values, border);
      outline-offset: 2px;
    }
  }

  .#{$name}.outline {
    color: map.get($values, text-color);
    background-color: transparent;
    border: 2px solid map.get($values, border);

    &:hover {
      color: map.get($values, text-hover);
      background-color: map.get($values, bg-hover);
    }

    &:focus {
      outline: 2px solid map.get($values, hover);
      outline-offset: 2px;
    }
  }
}

@each $name, $values in theme.$states {
  .#{$name} {
    color: map.get($values, text);
    background-color: map.get($values, bg);

    &:hover {
      background-color: map.get($values, hover);
      transform: translateY(-2px);
      box-shadow: theme.$box-shadow-large;
    }

    &:focus {
      outline: 2px solid map.get($values, border);
      outline-offset: 2px;
    }
  }

  .#{$name}.outline {
    color: map.get($values, text-color);
    background-color: transparent;
    border: 2px solid map.get($values, border);

    &:hover {
      color: map.get($values, text-hover);
      background-color: map.get($values, bg-hover);
    }

    &:focus {
      outline: 2px solid map.get($values, hover);
      outline-offset: 2px;
    }
  }
}

.xs {
  font-size: theme.$font-size-xs;
}

.small {
  font-size: theme.$font-size-sm;
}

.medium {
  font-size: theme.$font-size-base;
}

.large {
  font-size: theme.$font-size-lg;
}

.xl {
  font-size: theme.$font-size-xl;
}

.list {
  display: flex;
  gap: theme.$spacing-xs;
  padding: 0;
  margin: 0;
  list-style: none;
  flex-wrap: nowrap;
}

.item {
  display: flex;
  align-items: center;
  white-space: nowrap;
  color: inherit;
  transition: all theme.$transition-default;
}

.item_animate {
  animation: fade-in 0.3s ease-in-out;
}

.item_active {
  font-weight: theme.$font-weight-bolder;
  color: theme.$disabled-color;
}

.disabled {
  background-color: theme.$disabled-color;
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.6;
}

.link {
  text-decoration: none;
  color: inherit;
}

.link_label {
  display: inline-block;

  .link:hover & {
    text-decoration: underline;
  }
}

.current {
  font-weight: theme.$font-weight-bold;
  color: var(--text-color-primary);
}

.separator {
  margin: 0 theme.$spacing-xs;
  color: var(--text-color-light);
  display: flex;
  align-items: center;
}

.separator_icon {
  font-size: 0.8em;
}
