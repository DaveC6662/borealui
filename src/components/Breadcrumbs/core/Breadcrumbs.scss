@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:color";
@use "sass:map";

.breadcrumbs {
  display: flex;
  align-items: center;
  font-size: theme.$font-size-base;
  font-weight: theme.$font-weight-light;
  gap: theme.$spacing-xs;
  width: fit-content;
  padding: theme.$spacing-xs theme.$spacing-sm;
  list-style: none;
  overflow-x: auto;

  @include bp.down(sm) {
    font-size: theme.$font-size-sm;
    gap: theme.$spacing-xs * 0.5;
    padding: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    font-size: theme.$font-size-lg;
    gap: theme.$spacing-sm;
    padding: theme.$spacing-sm theme.$spacing-md;
  }
}

@each $key, $value in theme.$rounding {
  .breadcrumbs_round-#{$key} {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .breadcrumbs_shadow-#{$key} {
    box-shadow: $value;
  }
}

@each $name, $values in theme.$themes {
  .breadcrumbs_#{$name} {
    color: map.get($values, text);
    background-color: map.get($values, bg);

    &:hover {
      background-color: map.get($values, hover);
      transform: translateY(-2px);
      box-shadow: theme.$box-shadow-heavy;

      @include bp.down(sm) {
        transform: translateY(-1px);
        box-shadow: theme.$box-shadow-medium;
      }
    }

    &:focus {
      outline: 2px solid map.get($values, border);
      outline-offset: 2px;
    }
  }

  .breadcrumbs_#{$name}.breadcrumbs_outline {
    color: map.get($values, text-color);
    background-color: transparent;
    border: 2px solid map.get($values, border);

    @include bp.down(sm) {
      border-width: 1.5px;
    }

    &:hover {
      color: map.get($values, text-hover);
      background-color: map.get($values, bg-hover);
    }

    &:focus {
      outline: 2px solid map.get($values, hover);
      outline-offset: 2px;
    }
  }
}

@each $name, $values in theme.$states {
  .breadcrumbs_#{$name} {
    color: map.get($values, text);
    background-color: map.get($values, bg);

    &:hover {
      background-color: map.get($values, hover);
      transform: translateY(-2px);
      box-shadow: theme.$box-shadow-heavy;

      @include bp.down(sm) {
        transform: translateY(-1px);
        box-shadow: theme.$box-shadow-medium;
      }
    }

    &:focus {
      outline: 2px solid map.get($values, border);
      outline-offset: 2px;
    }
  }

  .breadcrumbs_#{$name}.breadcrumbs_outline {
    color: map.get($values, text-color);
    background-color: transparent;
    border: 2px solid map.get($values, border);

    @include bp.down(sm) {
      border-width: 1.5px;
    }

    &:hover {
      color: map.get($values, text-hover);
      background-color: map.get($values, bg-hover);
    }

    &:focus {
      outline: 2px solid map.get($values, hover);
      outline-offset: 2px;
    }
  }
}

.breadcrumbs_xs {
  font-size: theme.$font-size-xs;

  @include bp.down(sm) {
    font-size: theme.$font-size-xxs;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-sm;
  }
}

.breadcrumbs_small {
  font-size: theme.$font-size-sm;

  @include bp.down(sm) {
    font-size: theme.$font-size-xs;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-base;
  }
}

.breadcrumbs_medium {
  font-size: theme.$font-size-base;

  @include bp.down(sm) {
    font-size: theme.$font-size-sm;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-lg;
  }
}

.breadcrumbs_large {
  font-size: theme.$font-size-lg;

  @include bp.down(sm) {
    font-size: theme.$font-size-base;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-xl;
  }
}

.breadcrumbs_xl {
  font-size: theme.$font-size-xl;

  @include bp.down(sm) {
    font-size: theme.$font-size-lg;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-xl;
  }
}

.breadcrumbs_list {
  display: flex;
  gap: theme.$spacing-xs;
  padding: 0;
  margin: 0;
  list-style: none;
  flex-wrap: nowrap;

  @include bp.down(sm) {
    gap: theme.$spacing-xs * 0.5;
  }
  @include bp.up(lg) {
    gap: theme.$spacing-sm;
  }
}

.breadcrumbs_item {
  display: flex;
  align-items: center;
  white-space: nowrap;
  color: inherit;
  transition: all theme.$transition-default;
}

.breadcrumbs_item_animate {
  animation: fade-in 0.3s ease-in-out;
}

.breadcrumbs_item_active {
  font-weight: theme.$font-weight-bolder;
  color: theme.$disabled-color;
}

.breadcrumbs_disabled {
  background-color: theme.$disabled-color;
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.6;
}

.breadcrumbs_link {
  text-decoration: none;
  color: inherit;
}

.breadcrumbs_link_label {
  display: inline-block;

  .breadcrumbs_link:hover & {
    text-decoration: underline;
  }
}

.breadcrumbs_current {
  font-weight: theme.$font-weight-bold;
  color: var(--text-color-primary);
}

.breadcrumbs_separator {
  padding: 0 theme.$spacing-xs;
  color: var(--text-color-primary);
  margin-top: -1px;
  display: flex;
  align-items: center;

  @include bp.down(sm) {
    padding: 0 theme.$spacing-xxs;
  }
  @include bp.up(lg) {
    padding: 0 theme.$spacing-sm;
  }
}

@media (prefers-reduced-motion: reduce) {
  .breadcrumbs,
  .breadcrumbs_item {
    transition: none;
  }
  .breadcrumbs:hover,
  .breadcrumbs_item:hover {
    transform: none;
    box-shadow: none;
  }
}

@media (hover: none) {
  .breadcrumbs:hover,
  .breadcrumbs_item:hover {
    transform: none;
    box-shadow: none;
  }
}

@media (forced-colors: active) {
  .breadcrumbs {
    border: 1px solid ButtonText;
    outline-color: Highlight;
  }
}
