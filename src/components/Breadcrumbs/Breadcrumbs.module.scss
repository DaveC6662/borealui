@use "@styles/theme.scss" as theme;
@use "sass:color";
@use "sass:map";

.breadcrumbs {
  display: flex;
  align-items: center;
  font-size: theme.$font-size-sm;
  font-weight: theme.$font-weight-bold;
  padding: theme.$spacing-sm;
  border-radius: theme.$border-radius-lg;
}

.list {
  display: flex;
  align-items: center;
  list-style: none;
  gap: theme.$spacing-xs;
  padding: 0;
  margin: 0;
  flex-wrap: nowrap;

  &::-webkit-scrollbar {
    height: 6px;
  }
}

.item {
  display: flex;
  align-items: center;
}

.ellipsis {
  font-weight: theme.$font-weight-bold;
  padding: 0 theme.$spacing-xs;
  cursor: default;
  color: inherit;
}

.link {
  text-decoration: none;
  transition: color theme.$transition-default;

  &:hover {
    text-decoration: none;
    transform: scale(1.01);
    letter-spacing: 0.05em;
  }

  &:focus-visible {
    outline: 2px solid var(--text-color-primary);
    outline-offset: 2px;
  }

  .linkLabel {
    color: var(--text-color-primary);
    font-weight: theme.$font-weight-normal;
  }
}

.current {
  font-weight: theme.$font-weight-bolder;
}

.separator {
  margin: 0 theme.$spacing-xs;
  margin-bottom: -0.2em;
}

.separatorIcon {
  font-size: 0.8em;
  line-height: 0.9em;
}

.clear {
  background-color: transparent;
  color: var(--text-color-primary);

  &.outline {
    border-color: var(--text-color-primary);
  }
}

.outline {
  background-color: transparent;
  border: 2px solid currentcolor;
  box-shadow: none;
}

.disabled.outline {
  color: theme.$disabled-color;
  border-color: theme.$disabled-color;
}

$themes: (
  "primary": (
    bg: var(--primary-color),
    hover: var(--primary-color-hover),
    text: var(--text-color-primary),
    border: var(--primary-color),
    text-hover: var(--text-color-primary)
  ),
  "secondary": (
    bg: var(--secondary-color),
    hover: var(--secondary-color-hover),
    text: var(--text-color-secondary),
    border: var(--secondary-color),
    text-hover: var(--text-color-secondary)
  ),
  "success": (
    bg: theme.$success-color,
    hover: color.adjust(theme.$success-color, $lightness: -10%),
    text: var(--text-color-primary),
    border: theme.$success-color,
    text-hover: var(--text-color-primary)
  ),
  "error": (
    bg: theme.$error-color,
    hover: color.adjust(theme.$error-color, $lightness: -10%),
    text: var(--text-color-primary),
    border: theme.$error-color,
    text-hover: var(--text-color-primary)
  ),
  "warning": (
    bg: theme.$warning-color,
    hover: color.adjust(theme.$warning-color, $lightness: -10%),
    text: var(--text-color-primary),
    border: theme.$warning-color,
    text-hover: var(--text-color-primary)
  )
);

@each $name, $props in $themes {
  .#{$name} {
    background-color: map.get($props, bg);
    color: map.get($props, text);

    .linkLabel {
      color: map.get($props, text);
    }

    .separator {
      color: map.get($props, text);
    }

    &.outline {
      background-color: transparent;
      color: map.get($props, border);
      border-color: map.get($props, border);

      .linkLabel {
        color: map.get($props, border);
      }

      .separator {
        color: map.get($props, border);
      }

      &:hover {
        border-color: map.get($props, hover);
        color: map.get($props, text-hover);
      }
    }
  }
}

.xs {
  padding: theme.$spacing-xs 6px;

  .linkLabel,
  .current {
    font-size: theme.$font-size-xs;
  }
}

.small {
  padding: theme.$spacing-sm 10px;

  .linkLabel,
  .current {
    font-size: theme.$font-size-sm;
  }
}

.medium {
  padding: theme.$spacing-md 12px;
  border-radius: theme.$border-radius-xl;

  .linkLabel,
  .current {
    font-size: theme.$font-size-md;
  }
}

.large {
  padding: theme.$spacing-lg 16px;
  border-radius: theme.$border-radius-xl;

  .linkLabel,
  .current {
    font-size: theme.$font-size-lg;
  }
}

.xl {
  padding: theme.$spacing-xl 18px;
  border-radius: theme.$border-radius-xl;

  .linkLabel,
  .current {
    font-size: theme.$font-size-xl;
  }
}

.itemAnimate {
  animation: fade-in-slide 0.3s ease-out;
}

@keyframes fade-in-slide {
  0% {
    opacity: 0;
    transform: translateX(-8px);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}
