@use "../../../styles/theme" as theme;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";

.wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: var(--background-primary-light-color);
  border-radius: theme.$border-radius-lg;
  box-shadow: theme.$box-shadow-medium;
  min-width: 120px;
  width: fit-content;
  height: fit-content;
  text-align: center;
  margin: theme.$spacing-sm;
  transition: theme.$transition-default;
  gap: theme.$spacing-sm;

  @media (width >=480px) {
    padding: theme.$spacing-sm;
  }

  @each $theme, $properties in theme.$themes {
    &.#{$theme} {
      background-color: map.get($properties, bg);
      color: map.get($properties, color);

      .title {
        color: map.get($properties, color);
      }

      .subtext {
        color: map.get($properties, color);
      }

      &.outline {
        border: 2px solid map.get($properties, border);
        background-color: transparent;
      }
    }

    &.#{$theme}.outline .icon {
        color: map.get($properties, border);
    }
  }

  @each $state, $properties in theme.$states {
    &.#{$state} {
      background-color: map.get($properties, bg);
      color: map.get($properties, color);

      .title {
        color: map.get($properties, color);
      }

      .subtext {
        color: map.get($properties, color);
      }

      &.outline {
        border: 2px solid map.get($properties, border);
        background-color: transparent;
      }
    }

    &.#{$state}.outline .icon {
        color: map.get($properties, border);
    }
  }

  &.clear {
    border: none;
    box-shadow: none;
  }

  &.icon {
    font-size: 2rem;
    color: inherit;
    padding: theme.$spacing-sm;
  }

  .content {
    display: flex;
    flex-direction: column;
    align-items: inherit;
    padding: theme.$spacing-sm;
  }

  .title {
    font-size: theme.$font-size-sm;
    color: var(--text-color-primary);
  }

  .value {
    font-size: theme.$font-size-lg;
    font-weight: theme.$font-weight-bold;
  }

  &.left {
    align-items: flex-start;
    text-align: left;
  }

  &.right {
    align-items: flex-end;
    text-align: right;
  }

  $size-variations: (
    "xs": (
      width: 80px,
      icon-size: 1.5rem,
      title-size: theme.$font-size-xs,
      value-size: theme.$font-size-sm,
      subtext-size: theme.$font-size-xs,
    ),
    "small": (
      width: 140px,
      icon-size: 2rem,
      title-size: theme.$font-size-sm,
      value-size: theme.$font-size-md,
      subtext-size: theme.$font-size-sm,
    ),
    "medium": (
      width: 160px,
      icon-size: 2rem,
      title-size: theme.$font-size-base,
      value-size: theme.$font-size-lg,
      subtext-size: theme.$font-size-base,
    ),
    "large": (
      width: 200px,
      icon-size: 2.5rem,
      title-size: theme.$font-size-lg,
      value-size: theme.$font-size-xl,
      subtext-size: theme.$font-size-lg,
    ),
    "xl": (
      width: 220px,
      icon-size: 2.5rem,
      title-size: theme.$font-size-xl,
      value-size: theme.$font-size-xl,
      subtext-size: theme.$font-size-lg,
    ),
  );

  @each $size, $properties in $size-variations {
    &.#{$size} {
      width: map.get($properties, width);

      .icon {
        font-size: map.get($properties, icon-size);
      }

      .title {
        font-size: map.get($properties, title-size);
      }

      .value {
        font-size: map.get($properties, value-size);
      }

      .subtext {
        font-size: map.get($properties, subtext-size);
      }
    }
  }

  .subtext {
    font-size: theme.$font-size-sm !important;
    color: var(--text-color-primary);
    opacity: 0.7;
  }
}
