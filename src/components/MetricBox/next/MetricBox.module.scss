@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:map";

.wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: var(--background-primary-light-color);
  min-width: 120px;
  width: max-content;
  max-width: 100%;
  height: fit-content;
  text-align: center;
  margin: theme.$spacing-sm;
  gap: theme.$spacing-sm;
  transition: theme.$transition-default;

  @include bp.up(xs) {
    padding: theme.$spacing-sm;
  }

  @include bp.down(sm) {
    gap: theme.$spacing-xs;
    margin: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    gap: theme.$spacing-md;
    margin: theme.$spacing-md;
    min-width: 140px;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: 8px;
  }
}

.icon {
  font-size: 2rem;
  color: inherit;
  padding: 0px;

  @include bp.down(sm) {
    font-size: 1.8rem;
  }

  @include bp.up(lg) {
    font-size: 2.2rem;
  }
}

.content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: inherit;
  padding: theme.$spacing-sm;

  @include bp.up(lg) {
    padding: theme.$spacing-md;
  }
}

.title {
  font-size: theme.$font-size-sm;
  color: var(--text-color-primary);

  @include bp.down(sm) {
    font-size: theme.$font-size-xs;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-base;
  }
}

.value {
  font-size: theme.$font-size-lg;
  font-weight: theme.$font-weight-bold;

  @include bp.down(sm) {
    font-size: theme.$font-size-md;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-xl;
  }
}

.subtext {
  font-size: theme.$font-size-xs !important;
  color: var(--text-color-primary);
  opacity: 0.7;

  @include bp.up(lg) {
    font-size: theme.$font-size-md !important;
  }
}

.left {
  align-items: flex-start;
  text-align: left;
}
.right {
  align-items: flex-end;
  text-align: right;
}

@each $k, $v in theme.$rounding {
  .round#{$k} {
    border-radius: $v;
  }
}
@each $k, $v in theme.$shadow {
  .shadow#{$k} {
    box-shadow: $v;
  }
}

@each $name, $props in theme.$themes {
  .#{$name} {
    background-color: map.get($props, bg);
    color: map.get($props, color);

    .title,
    .subtext {
      color: map.get($props, color);
    }

    &.outline {
      border: 2px solid map.get($props, border);
      background-color: transparent;

      @include bp.down(sm) {
        border-width: 1.5px;
      }
    }
  }

  .#{$name}.outline .icon {
    color: map.get($props, border);
  }
}

@each $state, $props in theme.$states {
  .#{$state} {
    background-color: map.get($props, bg);
    color: map.get($props, color);

    .title,
    .subtext {
      color: map.get($props, color);
    }

    &.outline {
      border: 2px solid map.get($props, border);
      background-color: transparent;

      @include bp.down(sm) {
        border-width: 1.5px;
      }
    }
  }

  .#{$state}.outline .icon {
    color: map.get($props, bg);
  }
}

.clear {
  border: none;
}

$sizes: (
  "xs": (
    icon: 1.5rem,
    title: theme.$font-size-xs,
    value: theme.$font-size-sm,
    subtext: theme.$font-size-xs,
  ),
  "small": (
    icon: 2rem,
    title: theme.$font-size-sm,
    value: theme.$font-size-md,
    subtext: theme.$font-size-sm,
  ),
  "medium": (
    icon: 2rem,
    title: theme.$font-size-base,
    value: theme.$font-size-lg,
    subtext: theme.$font-size-base,
  ),
  "large": (
    icon: 2.5rem,
    title: theme.$font-size-lg,
    value: theme.$font-size-xl,
    subtext: theme.$font-size-lg,
  ),
  "xl": (
    icon: 2.5rem,
    title: theme.$font-size-xl,
    value: theme.$font-size-xl,
    subtext: theme.$font-size-lg,
  ),
);

@each $size, $vals in $sizes {
  .#{$size} {
    .icon {
      font-size: map.get($vals, icon);
    }
    .title {
      font-size: map.get($vals, title);
    }
    .value {
      font-size: map.get($vals, value);
    }
    .subtext {
      font-size: map.get($vals, subtext);
    }
  }
}

@media (prefers-reduced-motion: reduce) {
  .wrapper,
  .wrapper * {
    transition: none !important;
    animation: none !important;
  }
}

@media (forced-colors: active) {
  .wrapper {
    background: Canvas;
    color: CanvasText;
    outline-color: Highlight;
  }
  .outline {
    border: 1px solid ButtonText;
  }
}
