@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";

.chip {
  position: relative;
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-weight: theme.$font-weight-bold;
  max-width: 90vw;
  width: fit-content;
  min-width: 180px;
  opacity: 1;
  text-align: center;
  animation: fade-in 0.3s ease-out;
  transition:
    transform 0.3s ease-in-out,
    opacity 0.3s ease-in-out,
    box-shadow theme.$transition-default;

  @include bp.down(sm) {
    min-width: 150px;
    max-width: 96vw;
  }

  @include bp.up(lg) {
    min-width: 220px;
    max-width: 70vw;
  }

  @each $key, $value in theme.$rounding {
    &.round#{$key} {
      border-radius: $value;
    }
  }

  @each $key, $value in theme.$shadow {
    &.shadow#{$key} {
      box-shadow: $value;
    }
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
  }
}

.fixed {
  position: fixed;
  left: 50%;
  transform: translateX(-50%);
}

.fadeout {
  opacity: 0;
  transform: translate(-50%, -10px);
}

$chip-offset: 20px;

.topCenter {
  top: $chip-offset;
}

.bottomCenter {
  bottom: $chip-offset;
}

.topLeft {
  top: $chip-offset;
  left: $chip-offset;
  transform: none;
}

.topRight {
  top: $chip-offset;
  right: $chip-offset;
  left: auto;
  transform: none;
}

.bottomLeft {
  bottom: $chip-offset;
  left: $chip-offset;
  transform: none;
}

.bottomRight {
  bottom: $chip-offset;
  right: $chip-offset;
  left: auto;
  transform: none;
}

@each $name, $values in theme.$themes {
  .#{$name} {
    background-color: map.get($values, bg);
    color: map.get($values, text);
    border: map.get($values, border);

    &:focus-visible {
      outline: 2px solid map.get($values, border);
      outline-offset: 3px;
    }
  }
}

@each $name, $values in theme.$states {
  .#{$name} {
    background-color: map.get($values, bg);
    color: map.get($values, text);
    border: map.get($values, border);

    &:focus-visible {
      outline: 2px solid map.get($values, border);
      outline-offset: 3px;
    }
  }
}

.icon {
  margin-right: theme.$spacing-sm;
  display: flex;
  align-items: center;
  margin-top: -0.1em;

  @include bp.down(sm) {
    margin-right: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    margin-right: theme.$spacing-md;
  }
}

.message {
  flex-grow: 1;
  margin-right: 12px;

  @include bp.down(sm) {
    margin-right: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    margin-right: theme.$spacing-sm;
  }
}

.icon_inner {
  height: 1em;
  width: 1em;
}

$chip-sizes: (
  "xs": (
    padding: 5px 9px,
    font: theme.$font-size-xs,
    icon: 0.8rem,
    height: 20px,
  ),
  "small": (
    padding: 6px 10px,
    font: theme.$font-size-sm,
    icon: 0.9rem,
    height: 20px,
  ),
  "medium": (
    padding: 6px 12px,
    font: theme.$font-size-md,
    icon: 1.2rem,
  ),
  "large": (
    padding: 6px 14px,
    font: theme.$font-size-lg,
    icon: 1.3rem,
  ),
  "xl": (
    padding: 10px 18px,
    font: theme.$font-size-xl,
    icon: 2rem,
  ),
);

@each $size, $props in $chip-sizes {
  .#{$size} {
    padding: map.get($props, padding);

    @if map.get($props, height) {
      height: map.get($props, height);
    }

    .message {
      font-size: map.get($props, font);
    }

    .icon_inner {
      height: map.get($props, icon);
      width: map.get($props, icon);
    }

    @include bp.down(sm) {
      .message {
        font-size: clamp(
          theme.$font-size-xs,
          0.9rem + 0.1vw,
          map.get($props, font)
        );
      }

      padding: 5px 10px;
    }

    @include bp.up(lg) {
      .message {
        font-size: clamp(
          map.get($props, font),
          0.95rem + 0.25vw,
          theme.$font-size-xl
        );
      }

      padding: 8px 14px;

      @if $size == "xl" {
        padding: 12px 20px;
      }
    }
  }
}

@media (prefers-reduced-motion: reduce) {
  .chip,
  .chip * {
    animation: none !important;
    transition: none !important;
  }

  .chip:hover {
    transform: none !important;
    box-shadow: none !important;
  }
}

@media (hover: none) {
  .chip:hover {
    transform: none;
    box-shadow: none;
  }
}

@media (forced-colors: active) {
  .chip {
    border: 1px solid ButtonText;
    background: Canvas;
    color: CanvasText;
    outline-color: Highlight;
    box-shadow: none !important;
  }
}
