@use "../../../styles/theme" as theme;
@use "sass:color";
@use "sass:map";

.textArea {
  display: flex;
  width: fit-content;
  justify-content: center;
  align-items: center;
  transition: theme.$transition-default;

  @each $key, $value in theme.$rounding {
    &_round-#{$key} {
      border-radius: $value;
    }
  }

  @each $key, $value in theme.$shadow {
    &_shadow-#{$key} {
      box-shadow: $value;
    }
  }

  &_textInput {
    width: 100%;
    flex: 1;
    resize: vertical;
    border: none;
    outline: none;
    color: var(--text-color-primary);
    background-color: transparent;
    font-family: theme.$font-family-primary;
    padding: theme.$spacing-sm;
    margin: theme.$spacing-sm;
    font-size: theme.$font-size-base;
    border-radius: theme.$border-radius-xs;

    &::placeholder {
      color: var(--text-color-primary);
      opacity: 0.7;
    }

    @media (width <= 480px) {
      font-size: calc(theme.$font-size-base * 0.9);
    }
  }

  &_iconContainer {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: theme.$spacing-sm;
    margin-top: -0.1em;
    margin-left: 0.5em;

    svg {
      width: 1em;
      height: 1em;
      color: var(--text-color-primary);

      @media (width <= 480px) {
        width: 15px;
        height: 15px;
      }
    }
  }

  @each $theme, $props in theme.$themes {
    &_#{$theme} {
      background-color: map.get($props, bg);
      color: map.get($props, text, inherit);
      box-shadow: map.get($props, shadow, theme.$box-shadow-medium);

      &:hover {
        background-color: map.get($props, hover, map.get($props, bg));
      }

      .textInput::placeholder {
        color: map.get($props, placeholder, var(--text-color-primary));
      }

      &.textArea_outline {
        background-color: transparent;
        color: map.get($props, text);
        box-shadow: none;
        border: 2px solid map.get($props, border);
      }
    }
  }

  @each $state, $props in theme.$states {
    &_#{$state} {
      border: 2px solid map.get($props, border);
      color: map.get($props, text, inherit);
      box-shadow: map.get($props, shadow, theme.$box-shadow-medium);
    }
  }

  &_clear {
    box-shadow: none;
  }

  &_disabled {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
    background-color: theme.$disabled-color;

    .textInput {
      background-color: transparent;
    }
  }
}
