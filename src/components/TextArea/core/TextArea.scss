@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:map";

.textArea {
  display: flex;
  width: fit-content;
  justify-content: center;
  align-items: center;
  transition: theme.$transition-default;
  background: transparent;

  @include bp.down(sm) {
    width: 100%;
  }

  &:focus-within {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: theme.$border-radius-sm;
  }

  @each $key, $value in theme.$rounding {
    &_round-#{$key} {
      border-radius: $value;
    }
  }

  @each $key, $value in theme.$shadow {
    &_shadow-#{$key} {
      box-shadow: $value;
    }
  }

  &_text_input {
    width: 100%;
    flex: 1;
    resize: vertical;
    border: none;
    outline: none;
    color: var(--text-color-primary);
    background-color: transparent;
    font-family: theme.$font-family-primary;
    padding: theme.$spacing-sm;
    margin: theme.$spacing-sm;
    font-size: theme.$font-size-md;
    border-radius: theme.$border-radius-xs;
    min-height: 2.5em;
    line-height: 1.4;

    &::placeholder {
      color: var(--text-color-primary);
      opacity: 0.7;
    }

    &:focus-visible {
      outline: 2px solid var(--focus-outline-color, var(--primary-color));
      outline-offset: 2px;
      border-radius: theme.$border-radius-xs;
    }

    @include bp.down(xs) {
      font-size: calc(theme.$font-size-base * 0.9);
      padding: theme.$spacing-xs;
      margin: theme.$spacing-xs;
    }

    @include bp.up(lg) {
      font-size: theme.$font-size-base;
      padding: theme.$spacing-md;
      margin: theme.$spacing-sm;
    }
  }

  &_iconContainer {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: theme.$spacing-sm;
    margin-top: -0.1em;
    margin-left: 0.5em;

    svg {
      width: 1em;
      height: 1em;
      color: var(--text-color-primary);

      @include bp.down(xs) {
        width: 15px;
        height: 15px;
      }

      @include bp.up(lg) {
        width: 1.1em;
        height: 1.1em;
      }
    }
  }

  @each $themeName, $props in theme.$themes {
    &_#{$themeName} {
      background-color: map.get($props, bg);
      color: map.get($props, text, inherit);
      box-shadow: if(
        map.has-key($props, shadow),
        map.get($props, shadow),
        theme.$box-shadow-medium
      );

      &:hover {
        background-color: if(
          map.has-key($props, hover),
          map.get($props, hover),
          map.get($props, bg)
        );
      }

      .textArea_text_input::placeholder {
        color: if(
          map.has-key($props, placeholder),
          map.get($props, placeholder),
          var(--text-color-primary)
        );
      }

      &.textArea_outline {
        background-color: transparent;
        color: map.get($props, text);
        box-shadow: none;
        border: 2px solid map.get($props, border);
      }

      .textArea_text_input:focus-visible {
        outline: 2px solid map.get($props, border);
        outline-offset: 2px;
      }
    }
  }

  @each $stateName, $props in theme.$states {
    &_#{$stateName} {
      border: 2px solid map.get($props, border);
      color: map.get($props, text, inherit);
      box-shadow: if(
        map.has-key($props, shadow),
        map.get($props, shadow),
        theme.$box-shadow-medium
      );
    }
  }

  &_clear {
    box-shadow: none;
  }

  &_disabled {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
    background-color: theme.$disabled-color;

    .textArea_text_input {
      background-color: transparent;
    }
  }
}

@media (prefers-reduced-motion: reduce) {
  .textArea,
  .textArea * {
    transition: none !important;
  }
}

@media (hover: none) {
  .textArea[class*="textArea_"]:hover {
    background-color: inherit;
  }
}

@media (forced-colors: active) {
  .textArea {
    background: Canvas !important;
    color: CanvasText !important;
    border: 1px solid ButtonText !important;
  }

  .textArea_text_input {
    background: Canvas;
    color: CanvasText;
  }

  .textArea_text_input:focus-visible,
  .textArea:focus-within {
    outline: 2px solid Highlight !important;
    outline-offset: 2px !important;
  }
}
