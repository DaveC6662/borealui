@use "../../../styles/theme" as theme;
@use "sass:color";
@use "sass:map";

.textArea {
  display: flex;
  width: fit-content;
  justify-content: center;
  align-items: center;
  border-radius: theme.$border-radius-xs;
  box-shadow: theme.$box-shadow-medium;
  transition: theme.$transition-default;
}

.textInput {
  width: 100%;
  flex: 1;
  resize: vertical;
  border: none;
  outline: none;
  background-color: transparent;
  font-family: theme.$font-family-primary;
  padding: theme.$spacing-sm;
  margin: theme.$spacing-sm;
  font-size: theme.$font-size-base;
  border-radius: theme.$border-radius-xs;

  &::placeholder {
    color: var(--text-color-primary);
    opacity: 0.7;
  }

  @media (width <= 480px) {
    font-size: calc(theme.$font-size-base * 0.9);
  }
}

.iconContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: theme.$spacing-sm;
  margin-top: -0.1em;
  margin-left: 0.5em;

  svg {
    width: 1em;
    height: 1em;
    color: var(--text-color-primary);

    @media (width <= 480px) {
      width: 15px;
      height: 15px;
    }
  }
}

.togglePassword {
  background: none;
  border: none;
  cursor: pointer;
  border-radius: 50%;
  padding: theme.$spacing-xs;
  margin: 2px;
  margin-right: 0.5em;
  color: inherit;

  &:focus {
    outline: 2px solid rgb(255 255 255);
    outline-offset: 2px;
  }

  &:hover {
    color: rgb(0 0 0);
  }

  svg {
    width: 1.5em;
    height: 1.5em;

    @media (width <= 480px) {
      width: 18px;
      height: 18px;
    }
  }

  @media (width <= 480px) {
    margin-top: theme.$spacing-xs;
  }
}

@each $theme, $props in theme.$themes {
  .#{$theme} {
    background-color: map.get($props, bg);
    color: map.get($props, text, inherit);
    box-shadow: map.get($props, shadow, theme.$box-shadow-medium);

    &:hover {
      background-color: map.get($props, hover, map.get($props, bg));
    }

    .textInput::placeholder {
      color: map.get($props, placeholder, var(--text-color-primary));
    }

    .iconContainer svg {
      color: map.get($props, icon, var(--text-color-primary));
    }
  }
}

.disabled {
  opacity: 0.6;
  pointer-events: none;
  cursor: not-allowed;
  background-color: theme.$disabled-color;

  .textInput {
    background-color: transparent;
  }
}
