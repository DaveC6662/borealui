@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:map";

.textArea {
  display: flex;
  width: fit-content;
  justify-content: center;
  align-items: center;
  transition: theme.$transition-default;
  background: transparent;

  @include bp.down(sm) {
    width: 100%;
  }

  &:focus-within {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: theme.$border-radius-sm;
  }

  @each $name, $props in theme.$themes {
    &.#{$name} {
      background-color: map.get($props, bg);
      color: map.get($props, text, inherit);
      box-shadow: map.get($props, shadow, theme.$box-shadow-medium);

      &:hover {
        background-color: map.get($props, hover, map.get($props, bg));
      }

      .textInput::placeholder {
        color: map.get($props, placeholder, var(--text-color-primary));
      }

      .iconContainer svg {
        color: map.get($props, icon, var(--text-color-primary));
      }

      &.outline {
        background-color: transparent;
        color: map.get($props, text);
        box-shadow: none;
        border: 2px solid map.get($props, border);
      }
    }
  }

  @each $state, $props in theme.$states {
    &.#{$state} {
      border: 2px solid map.get($props, border);
      color: map.get($props, text, inherit);
      box-shadow: map.get($props, shadow, theme.$box-shadow-medium);
    }
  }

  &.clear {
    box-shadow: none;
  }

  &.disabled {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
    background-color: theme.$disabled-color;

    .textInput {
      background-color: transparent;
      color: var(--text-color-primary);
    }
  }
}

@each $k, $v in theme.$rounding {
  .round#{$k} {
    border-radius: $v;
  }
}

@each $k, $v in theme.$shadow {
  .shadow#{$k} {
    box-shadow: $v;
  }
}

.textInput {
  width: 100%;
  flex: 1;
  resize: vertical;
  border: none;
  outline: none;
  color: var(--text-color-primary);
  background-color: transparent;
  font-family: theme.$font-family-primary;
  padding: theme.$spacing-sm;
  margin: theme.$spacing-sm;
  font-size: theme.$font-size-md;
  border-radius: theme.$border-radius-xs;
  min-height: 2.5em;
  line-height: 1.4;

  &::placeholder {
    color: var(--text-color-primary);
    opacity: 0.7;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: theme.$border-radius-xs;
  }

  @include bp.down(xs) {
    font-size: calc(theme.$font-size-base * 0.9);
    padding: theme.$spacing-xs;
    margin: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    font-size: theme.$font-size-base;
    padding: theme.$spacing-md;
    margin: theme.$spacing-sm;
  }
}

.iconContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: theme.$spacing-sm;
  margin-top: -0.1em;
  margin-left: 0.5em;

  svg {
    width: 1em;
    height: 1em;
    color: var(--text-color-primary);

    @include bp.down(xs) {
      width: 15px;
      height: 15px;
    }

    @include bp.up(lg) {
      width: 1.1em;
      height: 1.1em;
    }
  }
}

.togglePassword {
  background: none;
  border: none;
  cursor: pointer;
  border-radius: 50%;
  padding: theme.$spacing-xs;
  margin: 2px;
  margin-right: 0.5em;
  color: inherit;

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }

  svg {
    width: 1.5em;
    height: 1.5em;

    @include bp.down(xs) {
      width: 18px;
      height: 18px;
    }
  }

  @include bp.down(xs) {
    margin-top: theme.$spacing-xs;
  }
}

@media (prefers-reduced-motion: reduce) {
  .textArea,
  .textArea * {
    transition: none !important;
  }
}

@media (hover: none) {
  .textArea[class*="outline"]:hover {
    background-color: inherit;
  }
}

@media (forced-colors: active) {
  .textArea {
    background: Canvas !important;
    color: CanvasText !important;
    border: 1px solid ButtonText !important;
  }

  .textInput {
    background: Canvas !important;
    color: CanvasText !important;
  }

  .textInput:focus-visible,
  .textArea:focus-within {
    outline: 2px solid Highlight !important;
    outline-offset: 2px !important;
  }
}
