@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:map";
@use "sass:list";

$sizes: (
  "xs": (
    toggle: (
      30px,
      12px,
    ),
    slider: (
      8px,
      8px,
    ),
    translate: 15px,
  ),
  "small": (
    toggle: (
      40px,
      20px,
    ),
    slider: (
      16px,
      16px,
    ),
    translate: 18px,
  ),
  "medium": (
    toggle: (
      50px,
      28px,
    ),
    slider: (
      20px,
      20px,
    ),
    translate: 22px,
  ),
  "large": (
    toggle: (
      60px,
      34px,
    ),
    slider: (
      25px,
      25px,
    ),
    translate: 28px,
  ),
  "xl": (
    toggle: (
      70px,
      44px,
    ),
    slider: (
      30px,
      30px,
    ),
    translate: 32px,
  ),
);

.container {
  display: flex;
  align-items: center;
  gap: theme.$spacing-sm;

  @include bp.down(xs) {
    gap: theme.$spacing-xxs;
  }
  @include bp.up(lg) {
    gap: theme.$spacing-md;
  }
}

.toggle_label {
  font-size: theme.$font-size-md;
  color: var(--text-color-primary);

  @include bp.down(xs) {
    font-size: theme.$font-size-sm;
  }
  @include bp.up(lg) {
    font-size: theme.$font-size-base;
  }
}

.toggle {
  background-color: theme.$disabled-color;
  position: relative;
  cursor: pointer;
  border: none;
  display: flex;
  align-items: center;
  transition: background 0.3s ease-in-out;
  outline: none;

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: 9999px;
  }

  &_slider {
    background-color: var(--text-color-primary);
    position: absolute;
    left: 4px;
    transition: transform 0.3s ease-in-out;
  }

  &_active {
    background-color: var(--primary-color);
  }

  &_clear .toggle_active {
    border: 1px solid var(--text-color-primary);
  }
}

@each $theme, $color in theme.$themes {
  .toggle_#{$theme} .toggle_active {
    background-color: map.get($color, bg);
  }
}
@each $state, $color in theme.$states {
  .toggle_#{$state} .toggle_active {
    outline: 2px solid map.get($color, border);
  }
}

@each $name, $vals in $sizes {
  $tw: list.nth(map.get($vals, toggle), 1);
  $th: list.nth(map.get($vals, toggle), 2);
  $sw: list.nth(map.get($vals, slider), 1);
  $sh: list.nth(map.get($vals, slider), 2);
  $tx: map.get($vals, translate);

  .toggle_#{$name} .toggle {
    width: $tw;
    height: $th;

    &_slider {
      width: $sw;
      height: $sh;
    }

    &_active .toggle_slider {
      transform: translateX($tx);
    }

    @include bp.down(xs) {
      width: $tw * 0.9;
      height: $th * 0.9;

      &_slider {
        width: $sw * 0.9;
        height: $sh * 0.9;
      }

      &_active .toggle_slider {
        transform: translateX($tx * 0.85);
      }
    }

    @include bp.up(lg) {
      width: $tw * 1.05;
      height: $th * 1.05;

      &_slider {
        width: $sw * 1.05;
        height: $sh * 1.05;
      }

      &_active .toggle_slider {
        transform: translateX($tx * 1.05);
      }
    }
  }
}

.toggle_disabled {
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.6;
  box-shadow: none;

  .toggle {
    background-color: theme.$disabled-color;
  }
}

@each $key, $value in theme.$rounding {
  .toggle_round-#{$key} {
    border-radius: $value;

    .toggle_slider {
      border-radius: $value;
    }
  }
}
@each $key, $value in theme.$shadow {
  .toggle_shadow-#{$key} {
    box-shadow: $value;
  }
}

@media (prefers-reduced-motion: reduce) {
  .toggle,
  .toggle * {
    transition: none !important;
    animation: none !important;
  }
}

@media (hover: none) {
  .toggle {
    transition: none;
  }
}

@media (forced-colors: active) {
  .toggle {
    background: ButtonFace;
    color: ButtonText;
    border: 1px solid ButtonText;
  }
  .toggle_active {
    background: Highlight;
  }
  .toggle_slider {
    background: ButtonText;
  }
  .toggle:focus-visible {
    outline: 2px solid Highlight;
    outline-offset: 2px;
  }
}
