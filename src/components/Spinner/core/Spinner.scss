@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:map";

.spinner_wrapper {
  width: fit-content;
  display: inline-flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: theme.$spacing-sm;
  font-size: theme.$font-size-base;
  user-select: none;
  transition: all theme.$transition-default;
  position: relative;

  @include bp.down(xs) {
    gap: theme.$spacing-xs;
    font-size: theme.$font-size-sm;
  }
  @include bp.up(lg) {
    gap: theme.$spacing-md;
    font-size: theme.$font-size-lg;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: 8px;
  }
}

.spinner {
  display: inline-block;
  position: relative;
  width: 50px;
  height: 50px;
  border-style: solid;
  border-width: 4px;
  border-radius: 50%;
  border-color: transparent;
  border-top-color: var(--primary-color);
  animation: spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;
  transition: transform theme.$transition-default;

  &:hover {
    animation: pulse 1.2s cubic-bezier(0.4, 0, 0.2, 1) infinite;
  }

  @include bp.down(xs) {
    width: 40px;
    height: 40px;
    border-width: 3px;
  }
  @include bp.up(lg) {
    width: 56px;
    height: 56px;
    border-width: 4px;
  }

  @each $name, $vals in theme.$themes {
    &_#{$name} {
      border-top-color: map.get($vals, border);
    }
  }

  @each $name, $vals in theme.$states {
    &_#{$name} {
      border-top-color: map.get($vals, border);
    }
  }

  @each $key, $value in theme.$rounding {
    &_round-#{$key} {
      border-radius: $value;
    }
  }

  @each $key, $value in theme.$shadow {
    &_shadow-#{$key} {
      box-shadow: $value;
    }
  }

  &_shadowElement {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 50%;
    background: transparent;
    z-index: 0;
  }

  &_clear {
    border-top-color: var(--text-color-primary);
  }

  &_label {
    font-size: theme.$font-size-sm;
    margin-top: theme.$spacing-xs;
    color: var(--text-color-primary);
    text-align: center;
    width: max-content;

    @include bp.down(xs) {
      font-size: theme.$font-size-xs;
    }
    @include bp.up(lg) {
      font-size: theme.$font-size-base;
    }
  }
}

@media (prefers-reduced-motion: reduce) {
  .spinner,
  .spinner:hover {
    animation: none !important;
  }
  .spinner_wrapper {
    transition: none !important;
  }
}

@media (hover: none) {
  .spinner:hover {
    animation: inherit;
  }
}

@media (forced-colors: active) {
  .spinner {
    border-color: transparent;
    border-top-color: Highlight;
  }
  .spinner_label {
    color: CanvasText;
  }
}
