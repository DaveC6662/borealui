@use "../../../styles/theme" as theme;
@use "sass:color";
@use "sass:map";

.avatar {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  aspect-ratio: 1 / 1;
  font-weight: theme.$font-weight-bold;
  text-transform: uppercase;
  color: var(--text-color-primary);
  border: 2px solid transparent;
  overflow: hidden;
  transition: all theme.$transition-default;
  z-index: 0;

  &.xs {
    width: 36px;
    height: 36px;
    font-size: 0.5rem;
  }

  &.small {
    width: 42px;
    height: 42px;
    font-size: 0.6rem;
  }

  &.medium {
    width: 56px;
    height: 56px;
    font-size: 0.7rem;
  }

  &.large {
    width: 72px;
    height: 72px;
    font-size: 0.8rem;
  }

  &.xl {
    width: 84px;
    height: 84px;
    font-size: 0.9rem;
  }

  &.circle {
    border-radius: 50%;
  }

  &.rounded {
    border-radius: theme.$border-radius-sm;
  }

  &.square {
    border-radius: 0;
  }

  &.outline {
    border-style: solid;
  }

  &.clear {
    background-color: transparent;

    &:hover {
      background-color: color.adjust(#000, $lightness: -10%);
      transform: translateY(-2px);
      box-shadow: theme.$box-shadow-large;
    }

    &:focus {
      outline: 2px solid var(--text-color-primary);
      outline-offset: 1px;
    }

    &.outline {
      color: var(--text-color-primary);
      border-color: var(--text-color-primary);

      &:hover {
        background-color: transparent;
        border-color: color.adjust(#000, $lightness: 10%);
      }
    }
  }

  @each $name, $props in theme.$themes {
    &.#{$name} {
      background-color: map.get($props, bg);
      color: var(--text-color-primary);

      &:hover {
        background-color: map.get($props, hover);
        transform: translateY(-2px);
        box-shadow: theme.$box-shadow-large;
      }

      &:focus {
        outline: 2px solid map.get($props, border);
        outline-offset: 2px;
      }
    }

    &.#{$name}.outline {
      background-color: transparent;
      color: map.get($props, text-color);
      border-color: map.get($props, border);

      &:hover {
        background-color: map.get($props, hover);
        border-color: map.get($props, hover);
        color: map.get($props, text-hover);
      }
    }
  }

  &.disabled.outline {
    color: theme.$disabled-color;
    border-color: theme.$disabled-color;
  }

  &.image {
    object-fit: cover;
    width: 100% !important;
    height: 100% !important;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
  }

  &.initials {
    font-size: inherit;
    font-weight: bold;
    z-index: 1;
    position: relative;
  }

  .fallback_icon {
    width: 70%;
    height: 70%;
    margin: auto;
    display: block;
    color: var(--text-color-primary);
  }

  .status {
    position: absolute;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
    z-index: 2;

    &.topLeft {
      top: 5px;
      left: 6px;
    }

    &.topRight {
      top: 5px;
      right: 6px;
    }

    &.bottomLeft {
      bottom: 5px;
      left: 6px;
    }

    &.bottomRight {
      bottom: 5px;
      right: 6px;
    }

    &.icon_only {
      background-color: transparent;
      border: none;
      font-size: 1em;

      svg {
        width: 1em;
        height: 1em;
      }
    }

    &.online {
      background-color: theme.$success-color;
      border: 1px solid color.adjust(theme.$success-color, $lightness: 20%);
    }

    &.away {
      background-color: theme.$warning-color;
      border: 1px solid color.adjust(theme.$warning-color, $lightness: 20%);
    }

    &.offline {
      background-color: theme.$disabled-color;
      border: 1px solid color.adjust(theme.$disabled-color, $lightness: 20%);
    }

    &.busy {
      background-color: theme.$error-color;
      border: 1px solid color.adjust(theme.$error-color, $lightness: 20%);
    }
  }

  &.dot {
    width: 100%;
    height: 100%;
    border-radius: 50%;
  }
}
