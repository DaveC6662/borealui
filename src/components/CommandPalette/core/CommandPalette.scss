@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:map";

.command_palette_overlay {
  position: fixed;
  inset: 0;
  background: rgb(0 0 0 / 60%);
  z-index: 9999;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding-top: 10vh;

  @include bp.down(sm) {
    padding-top: 6vh;
  }

  @include bp.up(lg) {
    padding-top: 12vh;
  }
}

.command_palette {
  background: var(--background-color-light);
  width: 90%;
  max-width: 500px;
  padding: theme.$spacing-md;
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: theme.$spacing-sm;

  @include bp.down(sm) {
    width: 94%;
    max-width: 560px;
    padding: theme.$spacing-sm;
    gap: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    max-width: 720px;
    padding: theme.$spacing-lg;
    gap: theme.$spacing-md;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 4px;
  }
}

@each $key, $value in theme.$rounding {
  .command_palette_round-#{$key} {
    border-radius: $value;
  }
  .command_palette_round-#{$key} .command_palette_item {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .command_palette_shadow-#{$key} {
    box-shadow: $value;
  }
}

.command_palette_input {
  width: 90%;
  padding: 0;
  margin: 0 auto;
  line-height: 1.3;
  font-size: theme.$font-size-base;

  @include bp.down(sm) {
    width: 96%;
    font-size: theme.$font-size-sm;
  }

  @include bp.up(lg) {
    width: 100%;
    font-size: theme.$font-size-lg;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }
}

.command_palette_list {
  list-style: none;
  padding: 0;
  margin: 0;
  max-height: 300px;
  overflow-y: auto;

  @include bp.down(sm) {
    max-height: 50vh;
  }

  @include bp.up(lg) {
    max-height: 60vh;
  }
}

.command_palette_item {
  padding: theme.$spacing-sm;
  cursor: pointer;
  display: flex;
  margin: theme.$spacing-xs;
  align-items: center;
  gap: theme.$spacing-xs;
  line-height: 0.8em;
  color: var(--text-color-primary);
  transition:
    background-color theme.$transition-default,
    transform theme.$transition-default,
    box-shadow theme.$transition-default;

  @include bp.down(sm) {
    padding: theme.$spacing-xs;
    margin: theme.$spacing-xxs;
    gap: theme.$spacing-xxs;
  }

  @include bp.up(lg) {
    padding: theme.$spacing-md;
    margin: theme.$spacing-sm;
    gap: theme.$spacing-sm;
  }

  &:hover {
    background-color: var(--background-color);
    transform: translateY(-1px);
    box-shadow: theme.$box-shadow-light;

    @include bp.down(sm) {
      transform: none;
      box-shadow: none;
    }
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
  }
}

.command_palette_icon {
  flex-shrink: 0;
}

.command_palette_empty {
  padding: theme.$spacing-sm;
  color: theme.$disabled-color;

  @include bp.down(sm) {
    padding: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    padding: theme.$spacing-md;
  }
}

.command_palette_active {
  font-weight: theme.$font-weight-bold;
  background-color: var(--background-color);
}

@each $name, $values in theme.$themes {
  .command_palette_#{$name} {
    border: 2px solid map.get($values, border);
  }

  @include bp.down(sm) {
    .command_palette_#{$name} {
      border-width: 1.5px;
    }
  }

  .command_palette_item.command_palette_#{$name}.command_palette_active {
    background-color: map.get($values, bg);
    color: if(
      $name == "primary",
      var(--text-color-primary),
      var(--text-color-secondary)
    );
  }

  .command_palette_item.command_palette_#{$name}:hover {
    background-color: map.get($values, hover);
  }
}

@each $name, $values in theme.$states {
  .command_palette_#{$name} {
    border: 2px solid map.get($values, border);
  }

  @include bp.down(sm) {
    .command_palette_#{$name} {
      border-width: 1.5px;
    }
  }

  .command_palette_item.command_palette_#{$name}.command_palette_active {
    background-color: map.get($values, bg);
    color: if(
      $name == "primary",
      var(--text-color-primary),
      var(--text-color-secondary)
    );
  }

  .command_palette_item.command_palette_#{$name}:hover {
    background-color: map.get($values, hover);
  }
}

.command_palette_clear {
  box-shadow: none;
}

@media (prefers-reduced-motion: reduce) {
  .command_palette,
  .command_palette * {
    transition: none !important;
  }

  .command_palette_item:hover {
    transform: none !important;
    box-shadow: none !important;
  }
}

@media (hover: none) {
  .command_palette_item:hover {
    transform: none;
    box-shadow: none;
  }
}

@media (forced-colors: active) {
  .command_palette {
    background: Canvas;
    color: CanvasText;
    outline-color: Highlight;
  }

  .command_palette_#{primary},
  .command_palette_#{secondary},
  .command_palette_#{tertiary},
  .command_palette_#{quaternary},
  .command_palette_#{success},
  .command_palette_#{error},
  .command_palette_#{warning} {
    border: 1px solid ButtonText;
  }

  .command_palette_item {
    border: 1px solid ButtonText;
    box-shadow: none !important;
  }

  .command_palette_item.command_palette_active {
    background: SelectedItem;
    color: SelectedItemText;
  }
}
