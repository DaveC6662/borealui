@use "../../../styles/theme" as theme;
@use "sass:map";

$theme-states: (
  "primary": var(--primary-color),
  "secondary": var(--secondary-color),
  "success": theme.$success-color,
  "error": theme.$error-color,
  "warning": theme.$warning-color,
  "clear": var(--text-color-primary),
);

.overlay {
  position: fixed;
  inset: 0;
  background: rgb(0 0 0 / 40%);
  z-index: 9999;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding-top: 10vh;
}

.palette {
  background: var(--background-color-light);
  border-radius: theme.$border-radius-lg;
  box-shadow: theme.$box-shadow-large;
  width: 90%;
  max-width: 500px;
  padding: theme.$spacing-md;
  display: flex;
  flex-direction: column;
  gap: theme.$spacing-sm;
}

.input {
  width: 90%;
  padding: none;
  margin: 0 auto;
}

.list {
  list-style: none;
  padding: 0;
  margin: 0;
  max-height: 300px;
  overflow-y: auto;
}

.item {
  padding: theme.$spacing-sm;
  cursor: pointer;
  border-radius: theme.$border-radius-sm;
  display: flex;
  align-items: center;
  gap: theme.$spacing-xs;
  line-height: 0.8em;
}

.icon {
  flex-shrink: 0;
}

.empty {
  padding: theme.$spacing-sm;
  color: theme.$disabled-color;
}

@each $state, $color in $theme-states {
  .#{$state} {
    border: 2px solid $color;

    .item {
      &:hover,
      &.active {
        background-color: $color;
        color: if(
          $state == "primary",
          var(--text-color-primary),
          var(--text-color-secondary)
        );
      }
    }
  }
}
