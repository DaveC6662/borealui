@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";
@use "sass:list";

// -------------------------------------------
// Accessibility: motion & hover environments
// -------------------------------------------
@media (prefers-reduced-motion: reduce) {
  .button {
    transition: none;
  }

  .loader {
    animation-duration: 2s;
  }
}

@media (hover: none) {
  .button:hover {
    transform: none;
  }
}

@media (forced-colors: active) {
  .button {
    border: 1px solid ButtonText;
    outline-color: Highlight;
  }
}

.button {
  min-height: 44px;
  min-width: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: theme.$spacing-xs;
  flex-wrap: nowrap;
  padding: 10px 20px;
  width: fit-content;
  border: none;
  cursor: pointer;
  transition:
    transform theme.$transition-default,
    box-shadow theme.$transition-default;
  font-weight: theme.$font-weight-bold;
  color: inherit;

  &:hover {
    transform: scale(1.05);
    text-decoration: none;
  }

  &:focus {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }

  @include bp.down(sm) {
    gap: theme.$spacing-xs;
    padding: 8px 14px;
  }

  @include bp.between(sm, md) {
    gap: theme.$spacing-sm;
    padding: 10px 16px;
  }

  @include bp.up(lg) {
    gap: theme.$spacing-md;
    padding: 12px 20px;
  }
}

.autoFull {
  @include bp.down(sm) {
    width: 100%;
    display: flex;
  }
}

@each $key, $value in theme.$rounding {
  .round#{$key} {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .shadow#{$key} {
    box-shadow: $value;
  }
}

.fullWidth {
  width: 100%;
  max-width: none;
  display: flex;

  @include bp.up(xl) {
    max-width: 640px;
  }
}

.loader {
  width: 1.2rem;
  height: 1.2rem;
  border: 2px solid transparent;
  border-top-color: var(--text-color-primary);
  border-radius: 50%;
  animation: spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;
}

.buttonIcon {
  margin-right: theme.$spacing-sm;
  display: flex;
  align-items: center;
  margin-top: -0.1em;

  @include bp.down(sm) {
    margin-right: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    margin-right: theme.$spacing-sm;
  }
}

.buttonLabel {
  font-size: clamp(theme.$font-size-sm, 0.9rem + 0.2vw, theme.$font-size-base);
}

.clear {
  background-color: transparent;
  box-shadow: none;
  color: var(--text-color-primary);
}

.outline {
  background-color: transparent;
  border: 2px solid currentcolor;
  box-shadow: none;

  @include bp.down(sm) {
    border-width: 1.5px;
  }

  @include bp.up(lg) {
    border-width: 2px;
  }
}

@each $name, $values in theme.$themes {
  .#{$name} {
    background-color: map.get($values, bg);
    color: map.get($values, text);

    &:hover {
      background-color: map.get($values, hover);
    }

    .loader {
      border-top-color: map.get($values, text);
    }

    &.outline {
      background-color: transparent;
      color: map.get($values, text);
      border-color: map.get($values, border);

      &:hover {
        border-color: map.get($values, hover);
        color: map.get($values, text);
        background-color: map.get($values, bg);
      }
    }
  }
}

@each $name, $values in theme.$states {
  .#{$name} {
    background-color: map.get($values, bg);
    color: map.get($values, text);

    &:hover {
      background-color: map.get($values, hover);
    }

    .loader {
      border-top-color: map.get($values, text);
    }

    &.outline {
      background-color: transparent;
      color: map.get($values, text);
      border-color: map.get($values, border);

      &:hover {
        border-color: map.get($values, hover);
        color: map.get($values, text);
        background-color: map.get($values, bg);
      }
    }
  }
}

.disabled {
  background-color: theme.$disabled-color;
  color: var(--text-color-primary);
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.6;
  box-shadow: none;

  &.outline {
    border-color: theme.$disabled-color;
    color: theme.$disabled-color;
  }
}

$sizes: (
  "xs": (
    padding: 4px 8px,
    label: theme.$font-size-xs,
    icon: 1rem,
  ),
  "small": (
    padding: 6px 10px,
    label: theme.$font-size-sm,
    icon: 1rem,
  ),
  "medium": (
    padding: 6px 12px,
    label: theme.$font-size-md,
    icon: 1.2rem,
  ),
  "large": (
    padding: 8px 16px,
    label: theme.$font-size-lg,
    icon: 1.3rem,
  ),
  "xl": (
    padding: 10px 18px,
    label: theme.$font-size-xl,
    icon: 1.5rem,
  ),
);

@each $size, $values in $sizes {
  .#{$size} {
    padding: map.get($values, padding);

    .buttonLabel {
      $base: map.get($values, label);

      font-size: clamp(
        max(theme.$font-size-sm, $base - 2px),
        0.9rem + 0.25vw,
        $base
      );

      @include bp.up(lg) {
        font-size: calc(#{$base} * 1.05);
      }
    }

    .icon {
      width: map.get($values, icon);
      height: map.get($values, icon);

      @include bp.up(lg) {
        width: calc(map.get($values, icon) * 1.05);
        height: calc(map.get($values, icon) * 1.05);
      }
    }

    @include bp.down(sm) {
      padding: max(8px, 0.6em) 10px;
    }

    @include bp.up(xl) {
      $vpad: list.nth(map.get($values, padding), 1);
      $hpad: list.nth(map.get($values, padding), 2);

      padding: $vpad $hpad * 1.1 $vpad $hpad * 1.1;
    }
  }
}
