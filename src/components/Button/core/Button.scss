@use "../../../styles/theme" as theme;
@use "sass:color";
@use "sass:map";

.button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: theme.$spacing-xs;
  width: fit-content;
  padding: 10px 20px;
  border-radius: theme.$border-radius-xl;
  border: none;
  cursor: pointer;
  transition:
    transform theme.$transition-default,
    box-shadow theme.$transition-default;
  font-weight: theme.$font-weight-bold;
  box-shadow: theme.$box-shadow-medium;
  color: inherit;

  &:hover {
    transform: scale(1.05);
    box-shadow: theme.$box-shadow-large;
    text-decoration: none;
  }

  &:focus {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }

  &_full-width {
    width: 100%;
    max-width: none;
    display: flex;
  }

  &_loader {
    width: 1.2rem;
    height: 1.2rem;
    border: 2px solid transparent;
    border-top-color: var(--text-color-primary);
    border-radius: 50%;
    animation: spin 1s cubic-bezier(0.4, 0, 0.2, 1) infinite;
  }

  &_button-icon {
    margin-right: theme.$spacing-sm;
    display: flex;
    align-items: center;
    margin-top: -0.1em;
  }

  &_label {
    font-size: theme.$font-size-base;
  }

  &_clear {
    background-color: transparent;
    box-shadow: none;
    color: var(--text-color-primary);
  }

  &_outline {
    background-color: transparent;
    border: 2px solid currentcolor;
    box-shadow: none;
  }

  @each $name, $values in theme.$themes {
    &_#{$name} {
      background-color: map.get($values, bg);
      color: map.get($values, text);

      &_#{$name}:hover {
        background-color: map.get($values, hover);
      }

      &_#{$name} .loader {
        border-top-color: map.get($values, text);
      }

      &.button_outline {
        background-color: transparent;
        color: map.get($values, text);
        border-color: map.get($values, border);
      }

      &.button_outline:hover {
        border-color: map.get($values, hover);
        color: map.get($values, text);
        background-color: map.get($values, bg);
      }
    }
  }

  @each $name, $values in theme.$states {
    &_#{$name} {
      background-color: map.get($values, bg);
      color: map.get($values, text);

      &_#{$name}:hover {
        background-color: map.get($values, hover);
      }

      &_#{$name} .loader {
        border-top-color: map.get($values, text);
      }

      &.button_outline {
        background-color: transparent;
        color: map.get($values, text);
        border-color: map.get($values, bg);
      }

      &.button_outline:hover {
        border-color: map.get($values, hover);
        color: map.get($values, text);
        background-color: map.get($values, bg);
      }
    }
  }

  &_disabled {
    background-color: theme.$disabled-color;
    color: var(--text-color-primary);
    cursor: not-allowed;
    pointer-events: none;
    opacity: 0.6;
    box-shadow: none;

    &_outline {
      border-color: theme.$disabled-color;
      color: theme.$disabled-color;
    }
  }

  $sizes: (
    "xs": (
      padding: 4px 8px,
      label: theme.$font-size-xs,
      icon: 1rem,
    ),
    "small": (
      padding: 6px 10px,
      label: theme.$font-size-sm,
      icon: 1rem,
    ),
    "medium": (
      padding: 6px 12px,
      label: theme.$font-size-md,
      icon: 1.2rem,
    ),
    "large": (
      padding: 8px 16px,
      label: theme.$font-size-lg,
      icon: 1.3rem,
    ),
    "xl": (
      padding: 10px 18px,
      label: theme.$font-size-xl,
      icon: 1.5rem,
    ),
  );

  @each $size, $values in $sizes {
    &_#{$size} {
      padding: map.get($values, padding);

      .button_label {
        font-size: map.get($values, label);
      }

      .button_icon {
        width: map.get($values, icon);
        height: map.get($values, icon);
      }
    }
  }
}
