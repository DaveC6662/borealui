@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";

$checkbox-sizes: (
  xs: 0.75em,
  small: 0.875em,
  medium: 1em,
  large: 1.25em,
  xl: 1.5em,
);
$checkmark-sizes: (
  xs: (
    width: 0.41em,
    height: 0.15em,
    border-width: 0.1em,
  ),
  small: (
    width: 0.43em,
    height: 0.2em,
    border-width: 0.115em,
  ),
  medium: (
    width: 0.505em,
    height: 0.215em,
    border-width: 0.125em,
  ),
  large: (
    width: 0.63em,
    height: 0.35em,
    border-width: 0.15em,
  ),
  xl: (
    width: 0.75em,
    height: 0.4em,
    border-width: 0.175em,
  ),
);
$label-font-sizes: (
  xs: theme.$font-size-xs,
  small: theme.$font-size-sm,
  medium: theme.$font-size-base,
  large: theme.$font-size-lg,
  xl: theme.$font-size-xl,
);

.checkbox {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  gap: theme.$spacing-sm;
  font-size: theme.$font-size-base;
  user-select: none;
  position: relative;
  transition: all theme.$transition-default;
  background-color: transparent;

  @include bp.down(sm) {
    gap: theme.$spacing-xs;
    font-size: theme.$font-size-sm;
  }

  @include bp.up(lg) {
    gap: theme.$spacing-md;
    font-size: theme.$font-size-lg;
  }
}

.checkbox_input {
  position: absolute;
  display: none;
  pointer-events: none;
  left: 0;
}

@each $key, $value in theme.$rounding {
  .checkbox_round-#{$key} .checkbox_box {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .checkbox_shadow-#{$key} .checkbox_box {
    box-shadow: $value;
  }
}

@each $size, $dimension in $checkbox-sizes {
  .checkbox_#{$size} .checkbox_box {
    width: $dimension;
    height: $dimension;

    @include bp.down(sm) {
      border-width: 1.5px;
    }

    @include bp.up(lg) {
      border-width: 2px;
    }
  }

  .checkbox_#{$size} .checkbox_box::after {
    $checkmark: map.get($checkmark-sizes, $size);

    width: map.get($checkmark, width);
    height: map.get($checkmark, height);
    border-left: map.get($checkmark, border-width) solid currentcolor;
    border-bottom: map.get($checkmark, border-width) solid currentcolor;

    @include bp.up(lg) {
      width: calc(#{map.get($checkmark, width)} * 1.05);
      height: calc(#{map.get($checkmark, height)} * 1.05);
      border-left-width: calc(#{map.get($checkmark, border-width)} * 1.05);
      border-bottom-width: calc(#{map.get($checkmark, border-width)} * 1.05);
    }
  }

  .checkbox_#{$size} .checkbox_box.checkbox_indeterminate::after {
    $checkmark: map.get($checkmark-sizes, $size);

    width: map.get($checkmark, width);
    height: map.get($checkmark, border-width);

    @include bp.up(lg) {
      width: calc(#{map.get($checkmark, width)} * 1.05);
      height: calc(#{map.get($checkmark, border-width)} * 1.05);
    }
  }

  .checkbox_#{$size} .checkbox_label {
    font-size: map.get($label-font-sizes, $size);

    @include bp.down(sm) {
      font-size: clamp(
        theme.$font-size-xs,
        0.9rem + 0.1vw,
        map.get($label-font-sizes, $size)
      );
    }

    @include bp.up(lg) {
      font-size: clamp(
        map.get($label-font-sizes, $size),
        0.95rem + 0.2vw,
        theme.$font-size-xl
      );
    }
  }
}

.checkbox_box {
  border: 2px solid currentcolor;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #fff;
  position: relative;
  transition: all theme.$transition-default;

  &::before {
    content: "";
    position: absolute;
    inset: -6px;

    @include bp.up(lg) {
      inset: -4px;
    }
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
  }
}

.checkbox_box::after {
  content: "";
  transform: rotate(-45deg);
  opacity: 0;
  transition: all theme.$transition-default;
}

.checkbox_input:checked + .checkbox_box::after {
  opacity: 1;
}

.checkbox_box.checkbox_indeterminate::after {
  opacity: 1;
  content: "";
  background-color: currentcolor;
  border: none;
  transform: none;
}

.checkbox_label {
  color: var(--text-color-primary);
  margin-bottom: -1px;
  line-height: 1.2;

  @include bp.down(sm) {
    line-height: 1.15;
  }

  @include bp.up(lg) {
    line-height: 1.25;
  }
}

@each $theme, $props in theme.$themes {
  .checkbox_#{$theme} {
    color: map.get($props, border);
  }
  .checkbox_#{$theme}.checkbox_box {
    border-color: map.get($props, border);
  }
  .checkbox_input:checked + .checkbox_box.checkbox_#{$theme}::after {
    border-color: map.get($props, border);
  }
}

@each $state, $props in theme.$states {
  .checkbox_#{$state} {
    color: map.get($props, bg);
  }
  .checkbox_box.checkbox_#{$state} {
    border-color: map.get($props, bg);
  }
  .checkbox_input:checked + .checkbox_box.checkbox_#{$state}::after {
    border-color: map.get($props, text);
  }
}

.checkbox_disabled {
  opacity: 0.6;
  cursor: not-allowed;
  color: theme.$disabled-color;

  .checkbox_box {
    box-shadow: none;
  }
}

@media (prefers-reduced-motion: reduce) {
  .checkbox,
  .checkbox * {
    transition: none !important;
    animation: none !important;
  }
}

@media (hover: none) {
  .checkbox:hover .checkbox_box {
    transform: none;
    box-shadow: none;
  }
}

@media (forced-colors: active) {
  .checkbox_box {
    border-color: ButtonText;
    background: Canvas;
    color: CanvasText;
    outline-color: Highlight;
    box-shadow: none !important;
  }

  .checkbox_box::after {
    border-color: ButtonText;
    background: ButtonText;
  }
}
