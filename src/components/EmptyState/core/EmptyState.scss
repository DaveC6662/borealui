@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";

.empty_state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: theme.$spacing-lg;
  background-color: var(--background-color-light);
  gap: theme.$spacing-xs;
  transition: theme.$transition-default;
  width: 400px;
  max-width: 100%;
  min-width: 100px;

  @include bp.down(md) {
    width: 100%;
    padding: theme.$spacing-md;
  }

  @include bp.up(lg) {
    padding: theme.$spacing-xl;
    width: 460px;
  }

  &_icon {
    font-size: 3em;

    @include bp.down(md) {
      font-size: 2.5em;
    }

    @include bp.down(xs) {
      font-size: 2em;
    }

    @include bp.up(lg) {
      font-size: 3.25em;
    }
  }

  &_title,
  &_message {
    margin: theme.$spacing-sm;
  }

  &_title {
    font-size: theme.$font-size-lg;
    font-weight: theme.$font-weight-bold;

    @include bp.down(md) {
      font-size: theme.$font-size-base;
    }

    @include bp.down(xs) {
      font-size: theme.$font-size-sm;
    }

    @include bp.up(lg) {
      font-size: calc(theme.$font-size-lg * 1.05);
    }
  }

  &_message {
    font-size: theme.$font-size-base;
    opacity: 0.8;
    width: 90%;

    @include bp.down(md) {
      font-size: theme.$font-size-sm;
    }

    @include bp.down(xs) {
      font-size: theme.$font-size-xs;
    }

    @include bp.up(lg) {
      font-size: calc(theme.$font-size-base * 1.05);
    }
  }

  @each $themeName, $values in theme.$themes {
    &_#{$themeName} {
      background-color: map.get($values, bg);
      color: map.get($values, color);
    }

    &_#{$themeName}.empty_state_outline {
      background-color: transparent;
      border: 2px solid map.get($values, border);
      color: map.get($values, text-color);

      @include bp.down(sm) {
        border-width: 1.5px;
      }
    }
  }

  @each $stateName, $values in theme.$states {
    &_#{$stateName} {
      background-color: map.get($values, bg);
      color: map.get($values, color);
    }

    &_#{$stateName}.empty_state_outline {
      background-color: transparent;
      border: 2px solid map.get($values, bg);
      color: map.get($values, text-color);

      @include bp.down(sm) {
        border-width: 1.5px;
      }
    }
  }

  &_outline {
    background-color: transparent;
    box-shadow: none;
  }

  &_clear {
    box-shadow: none;
  }

  &_clear.empty_state_outline {
    color: var(--text-color-primary);
    border-color: var(--text-color-primary);

    @include bp.down(sm) {
      border-width: 1.5px;
    }
  }

  &_disabled {
    opacity: 0.6;
    pointer-events: none;
  }

  $input-sizes: (
    "xs": theme.$spacing-xs,
    "small": theme.$spacing-sm,
    "medium": theme.$spacing-md,
    "large": theme.$spacing-lg,
    "xl": theme.$spacing-xl,
  );
  $font-sizes: (
    "xs": theme.$font-size-xs,
    "small": theme.$font-size-sm,
    "medium": theme.$font-size-md,
    "large": theme.$font-size-base,
    "xl": theme.$font-size-lg,
  );
  $icon-sizes: (
    "xs": 2em,
    "small": 3em,
    "medium": 3.5em,
    "large": 4em,
    "xl": 4.5em,
  );

  @each $size, $spacing in $input-sizes {
    &_#{$size} {
      .empty_state_title {
        padding: $spacing;
        font-size: map.get($font-sizes, $size);
      }

      .empty_state_message {
        font-size: map.get($font-sizes, $size);
      }

      .empty_state_icon {
        font-size: map.get($icon-sizes, $size);
      }

      @include bp.down(sm) {
        .empty_state_title {
          font-size: clamp(
            theme.$font-size-xs,
            0.9rem + 0.2vw,
            map.get($font-sizes, $size)
          );
        }

        .empty_state_message {
          font-size: clamp(
            theme.$font-size-xxs,
            0.85rem + 0.15vw,
            map.get($font-sizes, $size)
          );
        }
      }

      @include bp.up(lg) {
        .empty_state_title {
          font-size: clamp(
            map.get($font-sizes, $size),
            1rem + 0.4vw,
            theme.$font-size-xl
          );
        }

        .empty_state_message {
          font-size: clamp(
            map.get($font-sizes, $size),
            0.95rem + 0.25vw,
            theme.$font-size-lg
          );
        }
      }
    }
  }
}

@each $key, $value in theme.$rounding {
  .empty_state_round-#{$key} {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .empty_state_shadow-#{$key} {
    box-shadow: $value;
  }
}

.empty_state :focus-visible {
  outline: 2px solid var(--focus-outline-color, var(--primary-color));
  outline-offset: 3px;
  border-radius: 6px;
}

@media (prefers-reduced-motion: reduce) {
  .empty_state,
  .empty_state * {
    transition: none !important;
    animation: none !important;
  }
}

@media (hover: none) {
  .empty_state * {
    transition: none;
  }
}

@media (forced-colors: active) {
  .empty_state {
    background: Canvas;
    color: CanvasText;
    outline-color: Highlight;
  }

  .empty_state.empty_state_outline {
    border: 1px solid ButtonText;
  }
}
