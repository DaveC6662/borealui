@use "../../../styles/theme" as theme;
@use "../../../styles/globals";
@use "sass:color";
@use "sass:map";

.wrapper {
  position: relative;
  display: inline-flex;
  width: 300px;
  margin: theme.$spacing-xs 0;
  transition: theme.$transition-default;

  &:hover {
    box-shadow: theme.$box-shadow-heavy;
  }

  &.disabled {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
  }
}

.icon {
  position: absolute;
  top: 60%;
  transform: translateY(-50%);
  z-index: 1;
  right: 10px;
  pointer-events: none;
  font-size: 12px;
  color: var(--text-color-primary);
  transform-origin: center;
  background-color: transparent !important;
}

.select {
  width: 100%;
  padding: 5px 30px;
  font-size: theme.$font-size-sm;
  appearance: none;
  font-weight: 800;
  border: none;
  background-color: var(--background-light-color);
  color: var(--text-color-primary);
  cursor: pointer;
  transition:
    background-color 0.3s ease,
    border-color 0.3s ease;

  &:focus {
    border-color: var(--primary-color);
    outline: 2px solid var(--text-color-primary);
    outline-offset: 5px;
  }
}

@each $theme, $values in theme.$themes {
  .#{$theme} {
    background-color: map.get($values, bg);
    color: map.get($values, color);

    &:hover {
      background-color: map.get($values, hover);
    }
  }

  .#{$theme}.outline {
    background-color: transparent;
    color: map.get($values, color);
    border: 2px solid map.get($values, border);
  }

  .clear.#{$theme} {
    background-color: transparent;
  }
}

@each $state, $values in theme.$states {
  .#{$state} {
    background-color: map.get($values, bg);
    color: map.get($values, color);

    &:hover {
      background-color: map.get($values, hover);
    }
  }

  .#{$state}.outline {
    background-color: transparent;
    color: map.get($values, color);
    border: 2px solid map.get($values, border);
  }

  .clear.#{$state} {
    background-color: transparent;
  }
}

@each $key, $value in theme.$rounding {
  .round#{$key} {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .shadow#{$key} {
    box-shadow: $value;
  }
}

option {
  background-color: var(--background-color);
  border: none;
  color: var(--text-color-primary);
}

.clear {
  .select {
    background-color: transparent;
  }
}
