@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:map";

.wrapper {
  position: relative;
  display: inline-flex;
  justify-content: space-evenly;
  align-items: center;
  width: fit-content;
  margin: theme.$spacing-xs 0;
  transition: theme.$transition-default;

  @include bp.down(sm) {
    width: 100%;
  }

  &:hover {
    box-shadow: theme.$box-shadow-heavy;
  }

  &.disabled {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
    background-color: theme.$disabled-color !important;
  }

  &:focus-within {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: 8px;
  }

  @each $k, $v in theme.$rounding {
    &.round#{$k} {
      border-radius: $v;
    }
  }
  @each $k, $v in theme.$shadow {
    &.shadow#{$k} {
      box-shadow: $v;
    }
  }
}

.icon {
  position: relative;
  z-index: 1;
  pointer-events: none;
  font-size: 12px;
  top: 4px;
  color: var(--text-color-primary);
  transform-origin: center;
  background-color: transparent !important;
  right: theme.$spacing-sm;

  @include bp.down(xs) {
    font-size: 11px;
  }

  @include bp.up(lg) {
    font-size: 14px;
  }
}

.select {
  width: 100%;
  min-height: 40px;
  padding: 5px 30px;
  font-size: theme.$font-size-sm;
  font-weight: 800;
  appearance: none;
  border: none;
  color: var(--text-color-primary);
  background: transparent;
  cursor: pointer;
  transition:
    background-color 0.3s ease,
    border-color 0.3s ease;

  @include bp.down(xs) {
    min-height: 38px;
    padding: 4px 28px 4px theme.$spacing-sm;
    font-size: theme.$font-size-xs;
  }

  @include bp.up(lg) {
    font-size: theme.$font-size-sm;
  }

  &:focus {
    outline: 0;
  }
  &:focus-visible {
    outline: 0;
  }

  option {
    background-color: var(--background-color);
    border: none;
    color: var(--text-color-primary);
  }
}

@each $name, $vals in theme.$themes {
  .#{$name} {
    background-color: map.get($vals, bg);
    color: map.get($vals, color);

    &:hover {
      background-color: map.get($vals, hover);
    }
  }

  .#{$name}.outline {
    background-color: transparent;
    color: map.get($vals, color);
    border: 1px solid map.get($vals, border);

    @include bp.down(sm) {
      border-width: 1.5px;
    }
  }

  .clear.select_#{$name} {
    background-color: transparent;
  }
}

@each $name, $vals in theme.$states {
  .#{$name} {
    background-color: map.get($vals, bg);
    color: map.get($vals, color);

    &:hover {
      background-color: map.get($vals, hover);
    }
  }

  .#{$name}.outline {
    background-color: transparent;
    color: map.get($vals, color);
    border: 1px solid map.get($vals, border);

    @include bp.down(sm) {
      border-width: 1.5px;
    }
  }

  .clear.select_#{$name} {
    background-color: transparent;
  }
}

.clear {
  .select {
    background-color: transparent;
  }
}

@media (prefers-reduced-motion: reduce) {
  .wrapper,
  .wrapper * {
    transition: none !important;
    animation: none !important;
  }
}
@media (hover: none) {
  .wrapper:hover {
    box-shadow: none;
  }
}
@media (forced-colors: active) {
  .select {
    background: Canvas;
    color: CanvasText;
    border: 1px solid ButtonText;
  }
  .icon {
    color: ButtonText;
  }
  .wrapper:focus-within {
    outline: 2px solid Highlight;
    outline-offset: 3px;
  }
}
