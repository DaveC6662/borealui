@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;

.wrapper {
  position: relative;
  display: inline-block;
  outline: none;
}

.trigger {
  cursor: pointer;
  display: inline-flex;
  align-items: center;

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: 6px;
  }
}

.alignRight {
  right: 0;
  transform: translateX(0);
}
.alignLeft {
  left: 0;
  transform: translateX(0);
}

.menu {
  position: absolute;
  top: 100%;
  overflow: hidden;
  margin-top: theme.$spacing-xs;
  background-color: var(--background-color-lighter);
  z-index: theme.$z-index-drawer;
  padding: theme.$spacing-xs 0;
  width: max-content;
  animation: fade-in 0.2s ease-in-out;

  @include bp.up(sm) {
    &[data-overflow-right="true"] {
      left: auto;
      right: 0;
    }

    &[data-overflow-left="true"] {
      right: auto;
      left: 0;
    }
  }

  @include bp.down(sm) {
    min-width: 100%;
    max-height: 50vh;
    overflow-y: auto;
    animation: slide-up 0.3s ease-in-out;
    padding-bottom: calc(env(safe-area-inset-bottom, 0px) + theme.$spacing-sm);
  }

  @include bp.up(lg) {
    min-width: 200px;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
  }
}

.item {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: theme.$spacing-sm;
  line-height: 1em;
  width: 100%;
  background: none;
  border: none;
  padding: theme.$spacing-sm theme.$spacing-md;
  font-weight: theme.$font-weight-bold;
  color: var(--text-color-primary);
  font-size: theme.$font-size-sm;
  cursor: pointer;
  text-align: left;
  transition:
    background-color theme.$transition-default,
    transform theme.$transition-default,
    box-shadow theme.$transition-default;

  &:hover,
  &:focus {
    background-color: var(--background-color-dark);
    color: var(--text-color-primary);
    outline: none;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: 6px;
  }

  @include bp.down(sm) {
    font-size: theme.$font-size-xs;
    padding: theme.$spacing-md;
    gap: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    font-size: theme.$font-size-sm;
    padding: theme.$spacing-md theme.$spacing-lg;
    gap: theme.$spacing-sm;
  }
}

.icon {
  margin-right: theme.$spacing-xs;
  display: flex;
  align-items: center;

  @include bp.down(sm) {
    margin-right: theme.$spacing-xxs;
  }

  @include bp.up(lg) {
    margin-right: theme.$spacing-sm;
  }
}

.item[aria-disabled="true"],
.item.isDisabled {
  opacity: 0.6;
  cursor: not-allowed;
  pointer-events: none;
}

a.item {
  text-decoration: none;
}

@each $key, $value in theme.$rounding {
  .round#{$key} {
    border-radius: $value;
  }
  .round#{$key} .item {
    border-radius: $value;
  }
}

@each $key, $value in theme.$shadow {
  .shadow#{$key} {
    box-shadow: $value;
  }
}

@media (prefers-reduced-motion: reduce) {
  .menu,
  .item {
    transition: none !important;
    animation: none !important;
  }
}

@media (hover: none) {
  .item:hover {
    background-color: transparent;
    transform: none;
    box-shadow: none;
  }
}

@media (forced-colors: active) {
  .menu {
    background: Canvas;
    color: CanvasText;
    border: 1px solid ButtonText;
    outline-color: Highlight;
  }

  .item {
    border: 1px solid ButtonText;
  }

  .item:focus-visible {
    outline: 2px solid Highlight;
    outline-offset: 2px;
  }
}
