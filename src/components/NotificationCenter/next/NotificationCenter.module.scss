@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:map";

$notification-colors: (
  primary: var(--primary-color),
  success: theme.$success-color,
  error: theme.$error-color,
  warning: theme.$warning-color,
  info: var(--link-color),
);

.wrapper {
  position: relative;
  width: fit-content;
  max-width: 400px;
  padding: theme.$spacing-sm;
  overflow: hidden;

  @include bp.down(sm) {
    max-width: 100%;
    padding: theme.$spacing-xs;
  }

  @include bp.up(lg) {
    max-width: 520px;
    padding: theme.$spacing-md;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: 8px;
  }
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-weight: theme.$font-weight-bold;
  margin-bottom: theme.$spacing-sm;
  gap: theme.$spacing-xs;

  @include bp.down(sm) {
    margin-bottom: theme.$spacing-xs;
    flex-direction: column;
  }
  @include bp.up(lg) {
    margin-bottom: theme.$spacing-md;
  }
}

.body {
  width: 100%;
  overflow-x: auto;
}

.list {
  width: 95%;
  display: flex;
  width: fit-content;
  height: fit-content;
  flex-direction: column;
  gap: theme.$spacing-xs;
  margin: 0;
  padding: 4px;
  list-style: none;
  max-height: 340px;
  overflow-y: auto;

  @include bp.down(sm) {
    max-height: 50vh;
    gap: theme.$spacing-xxs;
    padding: 2px;
  }

  @include bp.up(lg) {
    max-height: 60vh;
    gap: theme.$spacing-sm;
  }
}

.notification {
  display: flex;
  align-items: center;
  padding: theme.$spacing-xs;
  overflow-x: auto;
  background-color: var(--background-color-dark);
  border-left: 4px solid transparent;
  animation: fade-in-up 0.3s ease;
  transition:
    background-color theme.$transition-default,
    transform theme.$transition-default,
    box-shadow theme.$transition-default;

  &:hover {
    background-color: var(--background-color);
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: 4px;
  }

  @include bp.down(sm) {
    padding: theme.$spacing-xxs;
  }
  @include bp.up(lg) {
    padding: theme.$spacing-sm;
  }

  @each $type, $color in $notification-colors {
    &.#{$type} {
      border-color: $color;
    }
  }

  .icon {
    margin-right: theme.$spacing-sm;
    font-size: 1.2rem;

    @include bp.down(sm) {
      margin-right: theme.$spacing-xs;
      font-size: 1rem;
    }

    @include bp.up(lg) {
      font-size: 1.3rem;
    }
  }

  .content {
    flex-grow: 1;

    .message {
      display: block;
      font-size: theme.$font-size-base;

      @include bp.down(sm) {
        font-size: theme.$font-size-sm;
      }
      @include bp.up(lg) {
        font-size: theme.$font-size-md;
      }
    }

    .timestamp {
      font-size: theme.$font-size-sm;
      color: var(--text-color-secondary);

      @include bp.down(sm) {
        font-size: theme.$font-size-xs;
      }
    }
  }

  .close {
    margin-left: theme.$spacing-sm;
    background: transparent;
    color: inherit;
    border: none;
    box-shadow: none;
    cursor: pointer;
    padding: theme.$spacing-xxs;
    line-height: 1;
    transition: opacity theme.$transition-default;

    &:hover {
      opacity: 0.7;
    }

    &:focus-visible {
      outline: 2px solid var(--focus-outline-color, var(--primary-color));
      outline-offset: 2px;
      border-radius: 4px;
    }

    @include bp.down(sm) {
      margin-left: theme.$spacing-xs;
    }
  }
}

@each $key, $value in theme.$rounding {
  .round#{$key} {
    border-radius: $value;
  }
}
@each $key, $value in theme.$shadow {
  .shadow#{$key} {
    box-shadow: $value;
  }
}

@media (prefers-reduced-motion: reduce) {
  .wrapper,
  .wrapper * {
    transition: none !important;
    animation: none !important;
  }
}
@media (hover: none) {
  .notification:hover {
    background-color: var(--background-color-dark);
  }
  .header .clearAll:hover,
  .notification .close:hover {
    opacity: 1;
  }
}

@media (forced-colors: active) {
  .notification {
    background: Canvas;
    color: CanvasText;
    border-left: 3px solid Highlight;
  }

  .header .clearAll,
  .notification .close {
    color: ButtonText;
    border: 1px solid ButtonText;
    border-radius: 4px;
  }
}
