@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "../../../styles/globals";
@use "sass:map";

$progress-sizes: (
  "xs": (
    dimensions: 40px,
    font-size: theme.$font-size-xs,
  ),
  "small": (
    dimensions: 60px,
    font-size: theme.$font-size-sm,
  ),
  "medium": (
    dimensions: 100px,
    font-size: theme.$font-size-md,
  ),
  "large": (
    dimensions: 140px,
    font-size: theme.$font-size-base,
  ),
  "xl": (
    dimensions: 200px,
    font-size: theme.$font-size-lg,
  ),
);

.circular_progress {
  display: flex;
  justify-content: center;
  align-items: center;

  @each $key, $value in theme.$shadow {
    &_shadow-#{$key} &_circle_border {
      box-shadow: $value;
    }
  }

  @each $size, $props in $progress-sizes {
    &_#{$size} {
      $dim: map.get($props, dimensions);
      $fs: map.get($props, font-size);

      width: $dim;
      height: $dim;

      @include bp.down(sm) {
        width: calc(#{$dim} * 0.9);
        height: calc(#{$dim} * 0.9);
      }
      @include bp.up(lg) {
        width: calc(#{$dim} * 1.1);
        height: calc(#{$dim} * 1.1);
      }

      .circular_progress_rating_text {
        font-size: $fs;
        font-weight: theme.$font-weight-bold;
        color: var(--text-color-primary);
      }

      .circular_progress_inner_circle {
        padding: theme.$spacing-xxs;

        @include bp.down(sm) {
          padding: calc(theme.$spacing-xxs * 0.75);
        }
        @include bp.up(lg) {
          padding: calc(theme.$spacing-xxs * 1.25);
        }
      }
    }
  }

  &_circle_border {
    width: 100%;
    height: 100%;
    border-radius: theme.$border-radius-round;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background 0.5s ease-in-out;

    &:focus-visible {
      outline: 2px solid var(--focus-outline-color, var(--primary-color));
      outline-offset: 3px;
    }
  }

  &_inner_circle {
    width: 80%;
    height: 80%;
    border-radius: theme.$border-radius-round;
    background: var(--background-color);
    padding: theme.$spacing-xxs;
    display: flex;
    justify-content: center;
    align-items: center;

    @include bp.down(sm) {
      width: 82%;
      height: 82%;
    }
    @include bp.up(lg) {
      width: 78%;
      height: 78%;
    }
  }
}

@each $name, $values in theme.$themes {
  .circular_progress_#{$name} {
    .circular_progress_inner_circle {
      background-color: map.get($values, bg);
    }
  }
}
@each $name, $values in theme.$states {
  .circular_progress_#{$name} {
    .circular_progress_inner_circle {
      background-color: map.get($values, bg);
    }
  }
}

@media (prefers-reduced-motion: reduce) {
  .circular_progress,
  .circular_progress * {
    transition: none !important;
    animation: none !important;
  }
}

@media (hover: none) {
  .circular_progress .circular_progress_circle_border:hover {
    box-shadow: none;
    transform: none;
  }
}

@media (forced-colors: active) {
  .circular_progress_circle_border,
  .circular_progress_inner_circle {
    background: Canvas;
    color: CanvasText;
    outline-color: Highlight;
    box-shadow: none !important;
  }

  .circular_progress_circle_border {
    border: 1px solid ButtonText;
  }
}
