@use "../../../styles/theme" as theme;
@use "../../../styles/_breakpoints" as bp;
@use "sass:map";

.container {
  display: inline-flex;
  justify-content: space-between;
  align-items: center;
  width: fit-content;
  margin: theme.$spacing-sm;
  transition: theme.$transition-default;
  max-width: 400px;
  background: transparent;

  &:focus-within {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 3px;
    border-radius: theme.$border-radius-md;
  }

  @include bp.down(xs) {
    padding: 0.5rem;
    height: 35px;
    width: 95%;
    max-width: none;
  }

  input {
    width: 100%;
    padding: theme.$spacing-xs;
    border: none;
    height: 100%;
    background-color: transparent;
    color: var(--text-color-primary);

    &:hover {
      background-color: transparent;
    }

    &:focus,
    &:focus-within {
      outline: none;
    }
  }
}

@each $k, $v in theme.$rounding {
  .round#{$k} {
    border-radius: $v;

    input {
      border-radius: $v;
    }
  }
}

@each $k, $v in theme.$shadow {
  .shadow#{$k} {
    box-shadow: $v;
  }
}

.textInput {
  outline: none;
  flex: 1;
  margin: theme.$spacing-sm;
  font-size: theme.$font-size-base;
  border: none;
  border-radius: theme.$border-radius-lg;
  background-color: transparent;
  color: var(--text-color-primary);
  font-family: theme.$font-family-primary;
  min-height: 2.5rem;

  &::placeholder {
    color: var(--text-color-primary);
    opacity: 0.8;
  }

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: theme.$border-radius-lg;
  }

  @include bp.down(xs) {
    width: 100%;
    font-size: calc(theme.$font-size-base * 0.9);
    margin: theme.$spacing-xs;
  }
}

.iconContainer {
  display: flex;
  box-sizing: border-box;
  margin: 0.1em;

  svg {
    width: 1em;
    height: 1em;
    color: var(--text-color-primary);

    @include bp.down(xs) {
      width: 15px;
      height: 15px;
    }
  }
}

.togglePassword {
  padding: theme.$spacing-xs;
  box-sizing: border-box;
  background: transparent;
  border: none;
  color: inherit;
  cursor: pointer;

  &:focus-visible {
    outline: 2px solid var(--focus-outline-color, var(--primary-color));
    outline-offset: 2px;
    border-radius: 6px;
  }

  @include bp.down(xs) {
    margin-top: theme.$spacing-xs;
  }
}

@each $state, $vals in theme.$states {
  .#{$state} {
    border: 2px solid map.get($vals, border);
  }
}

@each $themeName, $vals in theme.$themes {
  .#{$themeName} {
    background-color: map.get($vals, bg);
    color: map.get($vals, text);
    box-shadow: map.get($vals, shadow, theme.$box-shadow-medium);

    &:hover {
      background-color: map.get($vals, hover, map.get($vals, bg));
    }

    .textInput::placeholder {
      color: map.get($vals, text);
    }

    .iconContainer svg {
      color: map.get($vals, text);
    }

    &.outline {
      background-color: transparent;
      color: map.get($vals, text);
      box-shadow: none;
      border: 2px solid map.get($vals, border);
    }
  }
}

.clear {
  .textInput {
    border: none;
  }
}

.disabled {
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.6;
  background-color: theme.$disabled-color;

  .textInput {
    background-color: transparent;
  }
}

@media (prefers-reduced-motion: reduce) {
  .container,
  .container * {
    transition: none !important;
    animation: none !important;
  }
}

@media (forced-colors: active) {
  .container {
    background: Canvas;
    color: CanvasText;
    border: 1px solid ButtonText;
  }

  .textInput {
    color: CanvasText;
    background: Canvas;

    &::placeholder {
      color: CanvasText;
    }
  }

  .textInput:focus-visible,
  .container:focus-within {
    outline: 2px solid Highlight !important;
    outline-offset: 2px !important;
  }
}
